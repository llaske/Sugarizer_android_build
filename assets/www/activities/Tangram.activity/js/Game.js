var Game={components:{clock:Clock},props:["strokeColor","fillColor","puzzles","pNo","showHint","hintNumber","noOfHintsUsed","mode","level","gameOver","time","userResponse","score","disabled","l10n"],template:'\n    <div id="game-screen" class="pulse-main"\n      v-bind:style="{backgroundColor: strokeColor}"\n    >\n      <div class="game-main">\n        <v-stage class="stage" ref="stage" v-bind:config="configKonva"\n          v-bind:style="{\n            backgroundColor: \'#ffffff\',\n            borderRadius: \'10px\'\n          }"\n        >\n          <v-layer ref="layer" :config="{...configLayer, listening: false}">\n          <v-line :config="partitionLine"></v-line>\n          <template v-if="puzzles[pNo].outlinePoints.length>0">\n            <v-line\n              v-for="(outline, index) in puzzles[pNo].outlinePoints" v-bind:key="(100+index)"\n              :config="{\n                points: outline,\n                fill: index===0 ? strokeColor: \'#ffffff\',\n                closed: true,\n                lineJoin: \'round\',\n              }"\n            ></v-line>\n            <v-line v-for="targetTan in targetPuzzleTans" v-bind:key="targetTan.id"\n              :config="{\n                ...targetTan,\n                fill: gameOver===\'solved\' ? fillColor : targetTan.fill\n              }"\n            ></v-line>\n          </template>\n          <template v-if="gameOver!==\'passed\'">\n            <v-line v-for="tan in konvaTans" v-if="!(showHint && (tansSnapped[tan.id] || tansPlaced[tan.id]!=-1))"\n              v-bind:key="tan.id"\n              :config="{\n                ...tan,\n                listening: !gameOver,\n              }"\n              v-on:tap="onTap"\n              v-on:click="onClick"\n              v-on:mouseover="onMouseOver"\n              v-on:mouseout="onMouseOut"\n              v-on:dragstart="onDragStart"\n              v-on:dragend="onDragEnd"\n              v-on:touchend="onTouchEnd"\n            ></v-line>\n          </template>\n          </v-layer>\n        </v-stage>\n        <button id="back-button" v-if="!disabled" v-on:click="$emit(\'go-to-dataset-list\')"></button>\n        <div id="floating-info-block"\n          v-if="mode==\'timer\'"\n          v-bind:style="{width: infoContainer.width + \'px\',\n            height: infoContainer.height + \'px\',\n            top: infoContainer.top + \'px\',\n            right: infoContainer.right + \'px\'\n          }"\n        >\n          <div class="detail-block"\n            v-bind:style="{borderColor: strokeColor}"\n          >\n            <div class="detail-block-logo clock-logo"></div>\n            <div class="detail-block-content">\n              <clock v-bind:time="time"></clock>\n            </div>\n          </div>\n\n          <div class="detail-block score-block"\n            v-bind:style="{borderColor: strokeColor}"\n          >\n            <div class="detail-block-content score-title"><div>{{ l10n.stringScore }}</div></div>\n            <div class="detail-block-content score-val"><div>{{score}}</div></div>\n          </div>\n\n        </div>\n        <div class="tangram-name detail-block floating-block"\n          v-bind:style="{width: nameBlock.width + \'px\',\n            height: nameBlock.height + \'px\',\n            top: nameBlock.top + \'px\',\n            left: nameBlock.left + \'px\',\n            borderColor: \'transparent\'\n          }"\n        >\n          <div class="detail-block-content tangram-name-content"><div>{{ puzzles[pNo] ? tangramName : \'\'}}</div></div>\n        </div>\n\n        <canvas id="floating-celebration-block"\n          v-if="mode===\'non-timer\' && gameOver===\'solved\'"\n          v-bind:style="{width: celebrationBlock.width + \'px\',\n            height: celebrationBlock.height + \'px\',\n            top: celebrationBlock.top + \'px\',\n            left: celebrationBlock.left + \'px\'\n          }"\n        >\n        </canvas>\n\n        <div id="floating-game-over-block"\n          v-if="mode===\'non-timer\' && gameOver"\n          v-bind:style="{width: gameOverContainer.width + \'px\',\n            height: gameOverContainer.height + \'px\',\n            top: gameOverContainer.top + \'px\',\n            right: gameOverContainer.right + \'px\'\n          }"\n        >\n          <div class="gameOver-block"\n            v-bind:style="{borderColor: strokeColor}"\n          >\n            <div class="gameOver-block-logo clock-logo"></div>\n            <div class="gameOver-block-content">\n              <clock v-bind:time="time"></clock>\n            </div>\n          </div>\n\n          <div class="gameOver-block score-block"\n            v-bind:style="{borderColor: strokeColor}"\n          >\n            <div class="gameOver-block-content score-title"><div>{{l10n.stringScore}}</div></div>\n            <div class="gameOver-block-content score-val"><div>{{userResponse[pNo] ? userResponse[pNo].score : 0}}</div></div>\n          </div>\n\n          <div class="gameOver-block emoji-won-block"\n            v-if="gameOver===\'solved\'"\n            v-bind:style="{borderColor: null}"\n          ></div>\n          <div class="gameOver-block emoji-lost-block"\n            v-if="gameOver===\'passed\'"\n            v-bind:style="{borderColor: null}"\n          ></div>\n\n        </div>\n      </div>\n      <div class="game-footer">\n        <div>\n        </div>\n        <div class="footer-actions">\n          <transition name="fade" mode="out-in">\n            <button\n              v-if="!gameOver"\n              class="btn-in-footer btn-replay"\n              v-bind:style="{\n                backgroundColor: fillColor,\n                width: actionButtons.width + \'px\',\n                height: actionButtons.height + \'px\',\n              }"\n              v-on:click="onRefresh"\n            ></button>\n          </transition>\n          <transition name="fade" mode="out-in">\n            <button\n              class="btn-in-footer btn-restart"\n              v-bind:style="{\n                backgroundColor: fillColor,\n                width: actionButtons.width + \'px\',\n                height: actionButtons.height + \'px\',\n              }"\n              v-on:click="$emit(\'restart-game\')"\n              v-if="(mode===\'timer\'?\'true\':gameOver) && !disabled"\n            ></button>\n          </transition>\n          <transition name="fade" mode="out-in">\n            <button\n              class="btn-in-footer btn-pass"\n              v-bind:style="{\n                backgroundColor: fillColor,\n                width: actionButtons.width + \'px\',\n                height: actionButtons.height + \'px\',\n              }"\n              v-on:click="$emit(\'pass-puzzle\')"\n              v-if="!gameOver"\n            ></button>\n          </transition>\n        </div>\n      </div>\n\n    </div>\n  ',data:function(){return{configKonva:{width:60,height:60},configLayer:{scaleX:6,scaleY:6},infoContainer:{width:1,height:1,top:0,right:0},gameOverContainer:{width:1,height:1,top:0,right:0},nameBlock:{width:1,height:1,top:0,left:0},celebrationBlock:{width:1,height:1,top:0,left:0},partitionLine:{points:[],stroke:"green",strokeWidth:.8,lineJoin:"round",dash:[2,2]},actionButtons:{width:30,width:30},tans:[],tanState:0,currentTan:0,flip:5,initialPositions:[],tanColors:["blue","purple","red","green","yellow","yellow"],tansPlaced:[-1,-1,-1,-1,-1,-1,-1],snapRange:1.5,tansSnapped:[!1,!1,!1,!1,!1,!1,!1],konvaTans:[]}},created:function(){window.addEventListener("resize",this.resize),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("keyup",this.onKeyUp)},destroyed:function(){window.removeEventListener("resize",this.resize),window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("keyup",this.onKeyUp)},mounted:function(){let t=this;t.resize(),setTimeout(()=>{t.initializeTans()},0),document.getElementById("spinner").style.visibility="hidden"},watch:{mode:function(){this.resize(),this.initializeTans()},puzzles:function(){this.initializeTans()},pNo:function(){this.initializeTans()},gameOver:function(){let t=this;"solved"===t.gameOver?(t.deSelectTan(t.currentTan),"non-timer"===t.mode&&setTimeout(()=>{let t=document.querySelector("#floating-celebration-block");confetti.create(t,{resize:!0,useWorker:!0})({particleCount:150,spread:100,origin:{x:.5,y:.85}}),setTimeout(()=>{confetti.reset()},3e3)},0)):null===t.gameOver&&t.initializeTans()},tans:function(){this.konvaTans=[...this.tans]}},computed:{targetPuzzleTans:function(){let t=this;return null!=t.gameOver?t.puzzles[t.pNo].targetTans:1!==t.level||t.showHint||null!==t.gameOver?t.puzzles[t.pNo].targetTans.filter((n,e)=>!t.tansPlaced.includes(e)&&(!t.showHint||(!(!t.showHint||e!==t.hintNumber)||void 0))):[]},tangramName:function(){return this.$root.SugarL10n.dictionary&&this.$root.SugarL10n.dictionary["Data"+this.puzzles[this.pNo].name.replace(/ /g,"")]?this.$root.SugarL10n.get("Data"+this.puzzles[this.pNo].name.replace(/ /g,"")):this.puzzles[this.pNo].name}},methods:{resize:function(){let t=this,n=document.getElementById("main-toolbar"),e=0!=n.offsetHeight?n.offsetHeight+3:3,a=window.innerHeight-e;window.innerWidth;document.querySelector("#game-screen").style.height=a+"px";let o=document.querySelector(".game-main"),i=.985*o.offsetWidth,s=.97*o.offsetHeight,r=Math.min(.65*i,s)/75,l=t.configKonva.width,c=t.configKonva.height,d=Math.min(.65*l,c)/75;t.$set(t.configKonva,"width",i),t.$set(t.configKonva,"height",s),t.$set(t.configLayer,"scaleX",r),t.$set(t.configLayer,"scaleY",r),t.$emit("config-changed",{stageWidth:i,stageHeight:s,scale:r}),t.$emit("center-tangram"),t.initializeTansPosition(),0!=t.tans.length&&setTimeout(()=>{for(var n=0;n<7;n++)if(-1!==t.tansPlaced[n]){let e=i/(3*r)-l/(3*d),a=s/(2*r)-c/(2*d);t.moveTan(n,e,a)}else{let e=(i/l*(d/r)-1)*t.tans[n].x,a=(s/c*(d/r)-1)*t.tans[n].y;t.moveTan(n,e,a)}},0),t.$set(t.infoContainer,"width",.36*o.offsetWidth),t.$set(t.infoContainer,"height",.15*o.offsetHeight),t.$set(t.infoContainer,"top",.02*o.offsetHeight),t.$set(t.infoContainer,"right",.01*o.offsetWidth),t.$set(t.gameOverContainer,"width",.34*o.offsetWidth),t.$set(t.gameOverContainer,"height",.95*o.offsetHeight),t.$set(t.gameOverContainer,"top",.02*o.offsetHeight),t.$set(t.gameOverContainer,"right",.01*o.offsetWidth),t.resizePartitionLine(),t.$set(t.nameBlock,"width",.65*o.offsetWidth),t.$set(t.nameBlock,"height",.08*o.offsetHeight),t.$set(t.nameBlock,"top",.006*o.offsetHeight),t.$set(t.nameBlock,"left",.01*o.offsetWidth),t.$set(t.celebrationBlock,"width",.62*i),t.$set(t.celebrationBlock,"height",s),t.$set(t.celebrationBlock,"top",.02*o.offsetHeight),t.$set(t.celebrationBlock,"left",.01*o.offsetWidth);let f=document.querySelector(".game-footer");t.$set(t.actionButtons,"width",.95*f.offsetHeight),t.$set(t.actionButtons,"height",.95*f.offsetHeight)},initializeTansPosition:function(){let t=this,n=document.querySelector(".game-main"),e=.98*n.offsetWidth,a=.97*n.offsetHeight,o=t.configLayer.scaleX,i="timer"===t.mode?.08:0;t.initialPositions=[];for(var s=0;s<7;s++)switch(s){case 0:t.initialPositions.push({tanType:0,orientation:1,anchor:{x:{coeffInt:e/o*.88,coeffSqrt:1},y:{coeffInt:a/o*(.7+i),coeffSqrt:1}}});break;case 1:t.initialPositions.push({tanType:0,orientation:7,anchor:{x:{coeffInt:e/o*.87,coeffSqrt:1},y:{coeffInt:a/o*(.27+i),coeffSqrt:1}}});break;case 2:t.initialPositions.push({tanType:1,orientation:0,anchor:{x:{coeffInt:e/o*.72,coeffSqrt:1},y:{coeffInt:a/o*(.7+i),coeffSqrt:1}}});break;case 3:t.initialPositions.push({tanType:2,orientation:3,anchor:{x:{coeffInt:e/o*.93,coeffSqrt:1},y:{coeffInt:a/o*(.5+i),coeffSqrt:1}}});break;case 4:t.initialPositions.push({tanType:2,orientation:5,anchor:{x:{coeffInt:e/o*.75,coeffSqrt:1},y:{coeffInt:a/o*.43,coeffSqrt:1}}});break;case 5:t.initialPositions.push({tanType:3,orientation:7,anchor:{x:{coeffInt:e/o*.78,coeffSqrt:1},y:{coeffInt:a/o*(.52+i),coeffSqrt:1}}});break;case 6:t.initialPositions.push({tanType:5,orientation:0,anchor:{x:{coeffInt:e/o*.72,coeffSqrt:1},y:{coeffInt:a/o*(.23+i),coeffSqrt:1}}})}},resizePartitionLine:function(){let t,n=this,e=document.querySelector(".game-main"),a=(e.offsetWidth,.97*e.offsetHeight),o=n.configLayer.scaleX;t="timer"===n.mode?[.625*e.offsetWidth/o,.16*e.offsetHeight/o,.625*e.offsetWidth/o,a/o]:[.625*e.offsetWidth/o,.01*e.offsetHeight/o,.625*e.offsetWidth/o,a/o],n.$set(n.partitionLine,"points",t),n.$set(n.partitionLine,"stroke",n.strokeColor)},loadContext:function(t){let n=this,e=t.tans,a=t.pScale,o=t.pStage.width,i=t.pStage.height;n.populateTans(e);for(var s=0;s<7;s++){let r,l;e[s].placedAnchor?(r=n.configKonva.width/(3*n.configLayer.scaleX)-t.pStage.width/(3*t.pScale),l=n.configKonva.height/(2*n.configLayer.scaleY)-t.pStage.height/(2*t.pScale)):(r=(n.configKonva.width/o*(a/n.configLayer.scaleX)-1)*n.tans[s].tanObj.anchor.toFloatX(),l=(n.configKonva.height/i*(a/n.configLayer.scaleY)-1)*n.tans[s].tanObj.anchor.toFloatY()),n.moveTan(s,r,l)}n.tansSnapped=t.tansSnapped?t.tansSnapped:[!1,!1,!1,!1,!1,!1,!1],n.tansPlaced=t.tansPlaced?t.tansPlaced:[-1,-1,-1,-1,-1,-1,-1],n.$emit("update-tans-placed",n.tansPlaced)},initializeTans:function(){let t=this;t.populateTans(t.initialPositions),t.tansSnapped=[!1,!1,!1,!1,!1,!1,!1],t.tansPlaced=[-1,-1,-1,-1,-1,-1,-1],t.$emit("tangram-status",{res:!1,tans:[]}),t.$emit("update-tans-placed",t.tansPlaced)},populateTans:function(t){let n=this,e=[];for(var a=0;a<7;a++){let o=t[a].orientation,i=t[a].tanType,s=null,r=null,l=t[a].anchor.x.coeffInt,c=t[a].anchor.x.coeffSqrt,d=t[a].anchor.y.coeffInt,f=t[a].anchor.y.coeffSqrt;if(s=new Point(new IntAdjoinSqrt2(l,c),new IntAdjoinSqrt2(d,f)),t[a].placedAnchor){let n=t[a].placedAnchor.x.coeffInt,e=t[a].placedAnchor.x.coeffSqrt,o=t[a].placedAnchor.y.coeffInt,i=t[a].placedAnchor.y.coeffSqrt;r=new Point(new IntAdjoinSqrt2(n,e),new IntAdjoinSqrt2(o,i))}let h={id:a,x:100,y:100,offsetX:100,offsetY:100,points:[],tanObj:null,placedAnchor:r,stroke:n.strokeColor,strokeEnabled:!1,strokeWidth:.8,closed:!0,draggable:!0,fill:"blue",lineJoin:"round",shadowColor:"black",shadowBlur:4,shadowOpacity:.5,shadowEnabled:!1,perfectDrawEnabled:!1,shadowForStrokeEnabled:!1,hitStrokeWidth:0,transformsEnabled:"position"};h.tanObj=new Tan(i,s,o);let p=[...h.tanObj.getPoints()],g=h.tanObj.center(),u=[];for(let t=0;t<p.length;t++){let n=p[t].dup();u.push(n.toFloatX()),u.push(n.toFloatY())}h.offsetX=g.toFloatX(),h.offsetY=g.toFloatY(),h.x=h.offsetX,h.y=h.offsetY,h.points=u,h.fill=n.tanColors[h.tanObj.tanType],e.push(h)}n.tans=e,n.tanState=0,n.flip=5===e[5].tanObj.tanType?6:5},snapTan:function(t){let n=this,e=this.tans[t],a=(e.x,e.y,e.points),o=e.tanObj.getPoints(),i=!1;for(let s=0;s<7;s++){if(s==t)continue;let r=[...n.tans[s].points],l=[...n.tans[s].tanObj.getPoints()];for(let c=0;c<a.length;c+=2){let d=!1;for(let i=0;i<r.length;i+=2)if(Math.abs(a[c]-r[i])<=n.snapRange&&Math.abs(a[c+1]-r[i+1])<=n.snapRange){let a;if(n.tansSnapped[s]){let o=null,r=e.tanObj.anchor.dup();e.tanObj.anchor=0===i?n.tans[s].tanObj.anchor.dup():n.tans[s].tanObj.anchor.dup().add(Directions[n.tans[s].tanObj.tanType][n.tans[s].tanObj.orientation][i/2-1]),o=0===i?n.tans[s].placedAnchor.dup():n.tans[s].placedAnchor.dup().add(Directions[n.tans[s].tanObj.tanType][n.tans[s].tanObj.orientation][i/2-1]),0!=c&&(e.tanObj.anchor.subtract(Directions[e.tanObj.tanType][e.tanObj.orientation][c/2-1]),o.subtract(Directions[e.tanObj.tanType][e.tanObj.orientation][c/2-1])),a=e.tanObj.anchor.dup().subtract(r),n.tansSnapped[t]=!0,n.$set(n.tans[t],"placedAnchor",o)}else a=l[i/2].dup().subtract(o[c/2]),e.tanObj.anchor.add(a);a.toFloatX(),a.toFloatY();n.updatePoints(t),d=!0;break}if(d){i=!0;break}}if(i)break}if(!i)for(var s=0;s<a.length;s+=2){for(var r=0;r<n.puzzles[n.pNo].targetTans.length;r++){for(var l=!1,c=0;c<n.puzzles[n.pNo].targetTans[r].points.length;c+=2)if(Math.abs(a[s]-n.puzzles[n.pNo].targetTans[r].points[c])<=n.snapRange&&Math.abs(a[s+1]-n.puzzles[n.pNo].targetTans[r].points[c+1])<=n.snapRange){let a=new Point(new IntAdjoinSqrt2(n.puzzles[n.pNo].targetTans[r].points[c],0),new IntAdjoinSqrt2(n.puzzles[n.pNo].targetTans[r].points[c+1],0)),o=n.puzzles[n.pNo].targetTans[r].pointsObjs[c/2].dup();e.tanObj.anchor=a.dup(),0!=s&&(o.subtract(Directions[e.tanObj.tanType][e.tanObj.orientation][s/2-1]),e.tanObj.anchor.subtract(Directions[e.tanObj.tanType][e.tanObj.orientation][s/2-1])),n.$set(n.tans[t],"placedAnchor",o),n.tansSnapped[t]=!0,n.updatePoints(t),l=!0;break}if(l){i=!0;break}}if(i)break}i?n.deSelectTan(n.currentTan):(n.tansSnapped[t]=!1,n.$set(n.tans[t],"placedAnchor",null))},updatePoints:function(t){let n=this,e=n.tans[t].tanObj.getPoints(),a=n.tans[t].tanObj.center();n.$set(n.tans[t],"points",[]);for(let a=0;a<e.length;a++)n.tans[t].points.push(e[a].toFloatX()),n.tans[t].points.push(e[a].toFloatY());n.$set(n.tans[t],"offsetX",a.toFloatX()),n.$set(n.tans[t],"offsetY",a.toFloatY()),n.$set(n.tans[t],"x",a.toFloatX()),n.$set(n.tans[t],"y",a.toFloatY())},moveTan:function(t,n,e){this.tans[t].tanObj.anchor.add(new Point(new IntAdjoinSqrt2(n,0),new IntAdjoinSqrt2(e,0))),this.updatePoints(t)},rotateTan:function(t){let n=this,e=n.tans[t].x,a=n.tans[t].y,o=new Point(new IntAdjoinSqrt2(e,0),new IntAdjoinSqrt2(a,0));if(n.tans[t].tanObj.tanType==n.flip&&3==n.tans[t].tanObj.orientation){let e=4==n.flip?5:4,a=0,i=o.dup(),s=InsideDirections[e][a][0];i.x.subtract(new IntAdjoinSqrt2(s.toFloatX(),0)),i.y.subtract(new IntAdjoinSqrt2(s.toFloatY(),0)),n.tans[t].tanObj.anchor=i.dup(),n.tans[t].tanObj.tanType=e,n.tans[t].tanObj.orientation=a,n.updatePoints(t),n.flip=4==n.flip?5:4}else n.tans[t].tanObj.anchor.subtract(o).rotate(45).add(o),n.tans[t].tanObj.orientation=(n.tans[t].tanObj.orientation+1)%8,n.updatePoints(t)},checkIfSolved:function(){let t=this,n=!0,e=[...t.tans[t.currentTan].points].sort(),a=t.tans[t.currentTan].tanObj.tanType,o=-1;for(let n=0;n<t.puzzles[t.pNo].targetTans.length;n++){let s=t.puzzles[t.pNo].targetTans[n];if(s.tanObj.tanType===a){let t=0,a=[...s.points].sort();for(var i=0;i<a.length;i++)Math.abs(a[i]-e[i])<.5&&t++;if(t===a.length){o=n;break}}}t.$set(t.tansPlaced,t.currentTan,o),t.$emit("update-tans-placed",t.tansPlaced);for(var s=0;s<7;s++)if(-1===t.tansPlaced[s]){n=!1;break}if(n){let n=[];for(s=0;s<7;s++)if(t.tansSnapped[s]){let e=t.tans[s].placedAnchor.dup();var r=new Tan(t.tans[s].tanObj.tanType,e,t.tans[s].tanObj.orientation);n.push(r)}return void t.$emit("tangram-status",{res:!0,tans:n})}let l=[],c=!1;for(let n=0;n<t.tans.length;n++){if(!t.tansSnapped[n]){c=!0;break}{let e=t.tans[n].placedAnchor.dup();r=new Tan(t.tans[n].tanObj.tanType,e,t.tans[n].tanObj.orientation);l.push(r)}}if(c)n=!1;else{let e=computeOutline(l,!0);if(void 0===e||e.length!=t.puzzles[t.pNo].outline.length)n=!1;else{for(var d=!0,f=0;f<t.puzzles[t.pNo].outline.length;f++)d=d&&arrayEq(t.puzzles[t.pNo].outline[f],e[f],comparePoints);if(n=d,n){let t=computeSegments(getAllPoints(l),l);for(let e=0;e<t.length;e++)for(let a=e+1;a<t.length;a++)if(t[e].intersects(t[a])){n=!1;break}}}}t.$emit("tangram-status",{res:n,tans:l})},selectTan:function(t){this.$set(this.tans[t],"strokeEnabled",!0),this.$set(this.tans[t],"shadowEnabled",!0)},deSelectTan:function(t){this.$set(this.tans[t],"strokeEnabled",!1),this.$set(this.tans[t],"shadowEnabled",!1)},updateKonvaTans:function(t){let n=this.konvaTans.findIndex(n=>n.id===t),e=this.konvaTans[n];this.konvaTans.splice(n,1),this.konvaTans.push(e)},onClick:function(t){let n=this,e=t.target.id();n.tanState=1,n.deSelectTan(n.currentTan),n.currentTan=e,n.selectTan(n.currentTan),n.updateKonvaTans(e),1===n.tanState&&n.rotateTan(e)},onTap:function(t){let n=this,e=t.target.id();n.tanState=1,n.deSelectTan(n.currentTan),n.currentTan=e,n.selectTan(n.currentTan),n.updateKonvaTans(e),1===n.tanState&&n.rotateTan(e)},onDragStart:function(t){let n=this,e=t.target.id();n.deSelectTan(n.currentTan),n.currentTan=e,n.selectTan(n.currentTan),n.updateKonvaTans(e),n.tanState=1},onDragEnd:function(t){let n=this,e=t.target.id(),a=t.target.attrs.x,o=t.target.attrs.y,i=t.target.getClientRect();i.width*=.5,i.height*=.5,i.x+=.5*i.width,i.y+=.5*i.height;let s="timer"===n.mode?n.infoContainer.width:0,r="timer"===n.mode?n.infoContainer.height:0,l=n.nameBlock.height,c=n.configLayer.scaleX;if(i.x<0&&(a=i.width/(2*c)),i.y<l&&(o=(i.height+l)/(2*c)),i.y+i.height>n.configKonva.height&&(o=(n.configKonva.height-i.height/2)/c),i.x+i.width>n.configKonva.width-s&&i.y<r){let t=(n.configKonva.width-s-i.width/2)/c,l=(r+i.height/2)/c;Math.abs(t-n.tans[e].x)<=Math.abs(l-n.tans[e].y)?a=t:o=l}i.x+i.width>n.configKonva.width&&(i.y>r||i.y<0)&&(a=(n.configKonva.width-i.width/2)/c);let d=a-this.tans[e].x,f=o-this.tans[e].y;n.moveTan(e,d,f),setTimeout(()=>{n.snapTan(e),n.checkIfSolved()},0)},onMouseOver:function(t){let n=this,e=t.target.id();n.deSelectTan(n.currentTan),n.currentTan=e,n.selectTan(e),n.tanState=0},onMouseOut:function(t){this.tanState=0,this.deSelectTan(this.currentTan)},onTouchEnd:function(t){this.tanState=0,this.deSelectTan(this.currentTan)},onKeyDown:function(t){let n=this;if(!n.gameOver)if(0===n.tanState)if(37===t.keyCode||40===t.keyCode){n.deSelectTan(n.currentTan);let t=(n.currentTan-1)%7;n.currentTan=t<0?t+7:t,n.selectTan(n.currentTan)}else 38===t.keyCode||39===t.keyCode?(n.deSelectTan(n.currentTan),n.currentTan=(n.currentTan+1)%7,n.selectTan(n.currentTan)):13===t.keyCode&&(n.updateKonvaTans(n.currentTan),n.tanState=1);else if(1===n.tanState){n.selectTan(n.currentTan);let e=4,a=n.configLayer.scaleX,o=e/a,i=e/a;37===t.keyCode?(o*=-2,i=0):38===t.keyCode?(o=0,i*=-2):39===t.keyCode?(o*=2,i=0):40===t.keyCode?(o=0,i*=2):(o=0,i=0),16===t.keyCode&&n.rotateTan(n.currentTan),13===t.keyCode&&(n.tanState=0),n.moveTan(n.currentTan,o,i)}},onKeyUp:function(t){let n=this;n.gameOver||1===n.tanState&&setTimeout(()=>{n.snapTan(n.currentTan),n.checkIfSolved()},0)},onRefresh:function(t){let n=this;n.gameOver||t&&0===t.screenX&&0===t.screenY||setTimeout(()=>{n.initializeTans()},0)}}};