import extend from"extend";import Delta from"quill-delta";import{Attributor,ClassAttributor,EmbedBlot,Scope,StyleAttributor,BlockBlot}from"parchment";import{BlockEmbed}from"../blots/block";import Quill from"../core/quill";import logger from"../core/logger";import Module from"../core/module";import{AlignAttribute,AlignStyle}from"../formats/align";import{BackgroundStyle}from"../formats/background";import CodeBlock from"../formats/code";import{ColorStyle}from"../formats/color";import{DirectionAttribute,DirectionStyle}from"../formats/direction";import{FontStyle}from"../formats/font";import{SizeStyle}from"../formats/size";const debug=logger("quill:clipboard"),CLIPBOARD_CONFIG=[[Node.TEXT_NODE,matchText],[Node.TEXT_NODE,matchNewline],["br",matchBreak],[Node.ELEMENT_NODE,matchNewline],[Node.ELEMENT_NODE,matchBlot],[Node.ELEMENT_NODE,matchAttributor],[Node.ELEMENT_NODE,matchStyles],["li",matchIndent],["ol, ul",matchList],["pre",matchCodeBlock],["tr",matchTable],["b",matchAlias.bind(matchAlias,"bold")],["i",matchAlias.bind(matchAlias,"italic")],["style",matchIgnore]],ATTRIBUTE_ATTRIBUTORS=[AlignAttribute,DirectionAttribute].reduce(((t,e)=>(t[e.keyName]=e,t)),{}),STYLE_ATTRIBUTORS=[AlignStyle,BackgroundStyle,ColorStyle,DirectionStyle,FontStyle,SizeStyle].reduce(((t,e)=>(t[e.keyName]=e,t)),{});class Clipboard extends Module{constructor(t,e){super(t,e),this.quill.root.addEventListener("copy",(t=>this.onCaptureCopy(t,!1))),this.quill.root.addEventListener("cut",(t=>this.onCaptureCopy(t,!0))),this.quill.root.addEventListener("paste",this.onCapturePaste.bind(this)),this.matchers=[],CLIPBOARD_CONFIG.concat(this.options.matchers).forEach((([t,e])=>{this.addMatcher(t,e)}))}addMatcher(t,e){this.matchers.push([t,e])}convert({html:t,text:e},r={}){if(r[CodeBlock.blotName])return(new Delta).insert(e,{[CodeBlock.blotName]:r[CodeBlock.blotName]});if(!t)return(new Delta).insert(e||"");const n=(new DOMParser).parseFromString(t,"text/html").body,l=new WeakMap,[o,i]=this.prepareMatching(n,l),a=traverse(this.quill.scroll,n,o,i,l);return deltaEndsWith(a,"\n")&&(null==a.ops[a.ops.length-1].attributes||r.table)?a.compose((new Delta).retain(a.length()-1).delete(1)):a}dangerouslyPasteHTML(t,e,r=Quill.sources.API){if("string"==typeof t){const r=this.convert({html:t,text:""});this.quill.setContents(r,e),this.quill.setSelection(0,Quill.sources.SILENT)}else{const n=this.convert({html:e,text:""});this.quill.updateContents((new Delta).retain(t).concat(n),r),this.quill.setSelection(t+n.length(),Quill.sources.SILENT)}}onCaptureCopy(t,e=!1){if(t.defaultPrevented)return;t.preventDefault();const[r]=this.quill.selection.getRange();if(null==r)return;const{html:n,text:l}=this.onCopy(r,e);t.clipboardData.setData("text/plain",l),t.clipboardData.setData("text/html",n),e&&this.quill.deleteText(r,Quill.sources.USER)}onCapturePaste(t){if(t.defaultPrevented||!this.quill.isEnabled())return;t.preventDefault();const e=this.quill.getSelection(!0);if(null==e)return;const r=t.clipboardData.getData("text/html"),n=t.clipboardData.getData("text/plain"),l=Array.from(t.clipboardData.files||[]);!r&&l.length>0?this.quill.uploader.upload(e,l):this.onPaste(e,{html:r,text:n})}onCopy(t){const e=this.quill.getText(t);return{html:this.quill.getSemanticHTML(t),text:e}}onPaste(t,{text:e,html:r}){const n=this.quill.getFormat(t.index),l=this.convert({text:e,html:r},n);debug.log("onPaste",l,{text:e,html:r});const o=(new Delta).retain(t.index).delete(t.length).concat(l);this.quill.updateContents(o,Quill.sources.USER),this.quill.setSelection(o.length()-t.length,Quill.sources.SILENT),this.quill.scrollIntoView()}prepareMatching(t,e){const r=[],n=[];return this.matchers.forEach((l=>{const[o,i]=l;switch(o){case Node.TEXT_NODE:n.push(i);break;case Node.ELEMENT_NODE:r.push(i);break;default:Array.from(t.querySelectorAll(o)).forEach((t=>{if(e.has(t)){e.get(t).push(i)}else e.set(t,[i])}))}})),[r,n]}}function applyFormat(t,e,r){return"object"==typeof e?Object.keys(e).reduce(((t,r)=>applyFormat(t,r,e[r])),t):t.reduce(((t,n)=>n.attributes&&n.attributes[e]?t.push(n):t.insert(n.insert,extend({},{[e]:r},n.attributes))),new Delta)}function deltaEndsWith(t,e){let r="";for(let n=t.ops.length-1;n>=0&&r.length<e.length;--n){const e=t.ops[n];if("string"!=typeof e.insert)break;r=e.insert+r}return r.slice(-1*e.length)===e}function isLine(t){return 0!==t.childNodes.length&&["address","article","blockquote","canvas","dd","div","dl","dt","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","iframe","li","main","nav","ol","output","p","pre","section","table","td","tr","ul","video"].includes(t.tagName.toLowerCase())}Clipboard.DEFAULTS={matchers:[]};const preNodes=new WeakMap;function isPre(t){return null!=t&&(preNodes.has(t)||("PRE"===t.tagName?preNodes.set(t,!0):preNodes.set(t,isPre(t.parentNode))),preNodes.get(t))}function traverse(t,e,r,n,l){return e.nodeType===e.TEXT_NODE?n.reduce(((r,n)=>n(e,r,t)),new Delta):e.nodeType===e.ELEMENT_NODE?Array.from(e.childNodes||[]).reduce(((o,i)=>{let a=traverse(t,i,r,n,l);return i.nodeType===e.ELEMENT_NODE&&(a=r.reduce(((e,r)=>r(i,e,t)),a),a=(l.get(i)||[]).reduce(((e,r)=>r(i,e,t)),a)),o.concat(a)}),new Delta):new Delta}function matchAlias(t,e,r){return applyFormat(r,t,!0)}function matchAttributor(t,e,r){const n=Attributor.keys(t),l=ClassAttributor.keys(t),o=StyleAttributor.keys(t),i={};return n.concat(l).concat(o).forEach((e=>{let n=r.query(e,Scope.ATTRIBUTE);null!=n&&(i[n.attrName]=n.value(t),i[n.attrName])||(n=ATTRIBUTE_ATTRIBUTORS[e],null==n||n.attrName!==e&&n.keyName!==e||(i[n.attrName]=n.value(t)||void 0),n=STYLE_ATTRIBUTORS[e],null==n||n.attrName!==e&&n.keyName!==e||(n=STYLE_ATTRIBUTORS[e],i[n.attrName]=n.value(t)||void 0))})),Object.keys(i).length>0?applyFormat(e,i):e}function matchBlot(t,e,r){const n=r.query(t);if(null==n)return e;if(n.prototype instanceof EmbedBlot){const e={},l=n.value(t);if(null!=l)return e[n.blotName]=l,(new Delta).insert(e,n.formats(t,r))}else if(n.prototype instanceof BlockBlot&&!deltaEndsWith(e,"\n")&&e.insert("\n"),"function"==typeof n.formats)return applyFormat(e,n.blotName,n.formats(t,r));return e}function matchBreak(t,e){return deltaEndsWith(e,"\n")||e.insert("\n"),e}function matchCodeBlock(t,e,r){const n=r.query("code-block");return applyFormat(e,"code-block",!n||n.formats(t,r))}function matchIgnore(){return new Delta}function matchIndent(t,e,r){const n=r.query(t);if(null==n||"list"!==n.blotName||!deltaEndsWith(e,"\n"))return e;let l=-1,o=t.parentNode;for(;null!=o;)["OL","UL"].includes(o.tagName)&&(l+=1),o=o.parentNode;return l<=0?e:e.reduce(((t,e)=>e.attributes&&e.attributes.list?t.push(e):t.insert(e.insert,{indent:l,...e.attributes||{}})),new Delta)}function matchList(t,e){return applyFormat(e,"list","OL"===t.tagName?"ordered":"bullet")}function matchNewline(t,e,r){if(!deltaEndsWith(e,"\n")){if(isLine(t))return e.insert("\n");if(e.length()>0&&t.nextSibling){let{nextSibling:n}=t;for(;null!=n;){if(isLine(n))return e.insert("\n");const t=r.query(n);if(t&&t.prototype instanceof BlockEmbed)return e.insert("\n");n=n.firstChild}}}return e}function matchStyles(t,e){const r={},n=t.style||{};return"italic"===n.fontStyle&&(r.italic=!0),(n.fontWeight.startsWith("bold")||parseInt(n.fontWeight,10)>=700)&&(r.bold=!0),Object.keys(r).length>0&&(e=applyFormat(e,r)),parseFloat(n.textIndent||0)>0?(new Delta).insert("\t").concat(e):e}function matchTable(t,e){const r="TABLE"===t.parentNode.tagName?t.parentNode:t.parentNode.parentNode;return applyFormat(e,"table",Array.from(r.querySelectorAll("tr")).indexOf(t)+1)}function matchText(t,e){let r=t.data;if("O:P"===t.parentNode.tagName)return e.insert(r.trim());if(0===r.trim().length&&r.includes("\n"))return e;if(!isPre(t)){const replacer=(t,e)=>{const r=e.replace(/[^\u00a0]/g,"");return r.length<1&&t?" ":r};r=r.replace(/\r\n/g," ").replace(/\n/g," "),r=r.replace(/\s\s+/g,replacer.bind(replacer,!0)),(null==t.previousSibling&&isLine(t.parentNode)||null!=t.previousSibling&&isLine(t.previousSibling))&&(r=r.replace(/^\s+/,replacer.bind(replacer,!1))),(null==t.nextSibling&&isLine(t.parentNode)||null!=t.nextSibling&&isLine(t.nextSibling))&&(r=r.replace(/\s+$/,replacer.bind(replacer,!1)))}return e.insert(r)}export{Clipboard as default,matchAttributor,matchBlot,matchNewline,matchText,traverse};