import Delta from"quill-delta";import Quill from"../core/quill";import Module from"../core/module";import{TableCell,TableRow,TableBody,TableContainer,tableId}from"../formats/table";class Table extends Module{static register(){Quill.register(TableCell),Quill.register(TableRow),Quill.register(TableBody),Quill.register(TableContainer)}constructor(...l){super(...l),this.listenBalanceCells()}balanceTables(){this.quill.scroll.descendants(TableContainer).forEach((l=>{l.balanceCells()}))}deleteColumn(){const[l,,e]=this.getTable();null!=e&&(l.deleteColumn(e.cellOffset()),this.quill.update(Quill.sources.USER))}deleteRow(){const[,l]=this.getTable();null!=l&&(l.remove(),this.quill.update(Quill.sources.USER))}deleteTable(){const[l]=this.getTable();if(null==l)return;const e=l.offset();l.remove(),this.quill.update(Quill.sources.USER),this.quill.setSelection(e,Quill.sources.SILENT)}getTable(l=this.quill.getSelection()){if(null==l)return[null,null,null,-1];const[e,t]=this.quill.getLine(l.index);if(null==e||e.statics.blotName!==TableCell.blotName)return[null,null,null,-1];const i=e.parent;return[i.parent.parent,i,e,t]}insertColumn(l){const e=this.quill.getSelection(),[t,i,s]=this.getTable(e);if(null==s)return;const n=s.cellOffset();t.insertColumn(n+l),this.quill.update(Quill.sources.USER);let u=i.rowOffset();0===l&&(u+=1),this.quill.setSelection(e.index+u,e.length,Quill.sources.SILENT)}insertColumnLeft(){this.insertColumn(0)}insertColumnRight(){this.insertColumn(1)}insertRow(l){const e=this.quill.getSelection(),[t,i,s]=this.getTable(e);if(null==s)return;const n=i.rowOffset();t.insertRow(n+l),this.quill.update(Quill.sources.USER),l>0?this.quill.setSelection(e,Quill.sources.SILENT):this.quill.setSelection(e.index+i.children.length,e.length,Quill.sources.SILENT)}insertRowAbove(){this.insertRow(0)}insertRowBelow(){this.insertRow(1)}insertTable(l,e){const t=this.quill.getSelection();if(null==t)return;const i=new Array(l).fill(0).reduce((l=>{const t=new Array(e).fill("\n").join("");return l.insert(t,{table:tableId()})}),(new Delta).retain(t.index));this.quill.updateContents(i,Quill.sources.USER),this.quill.setSelection(t.index,Quill.sources.SILENT),this.balanceTables()}listenBalanceCells(){this.quill.on(Quill.events.SCROLL_OPTIMIZE,(l=>{l.some((l=>!!["TD","TR","TBODY","TABLE"].includes(l.target.tagName)&&(this.quill.once(Quill.events.TEXT_CHANGE,((l,e,t)=>{t===Quill.sources.USER&&this.balanceTables()})),!0)))}))}}export default Table;