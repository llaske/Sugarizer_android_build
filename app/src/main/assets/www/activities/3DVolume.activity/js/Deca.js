let vertices=[],faces=[[5,7,11,0],[4,2,10,1],[1,3,11,2],[0,8,10,3],[7,9,11,4],[8,6,10,5],[9,1,11,6],[2,0,10,7],[3,5,11,8],[6,4,10,9],[1,0,2,-1],[1,2,3,-1],[3,2,4,-1],[3,4,5,-1],[5,4,6,-1],[5,6,7,-1],[7,6,8,-1],[7,8,9,-1],[9,8,0,-1],[9,0,1,-1]];for(let e=0,t=0;e<10;++e,t+=2*Math.PI/10)vertices.push([Math.cos(t),Math.sin(t),.105*(e%2?1:-1)]);vertices.push([0,0,-1]),vertices.push([0,0,1]);let backColor,color,scaleFactor=1.5,values=10,faceTexts=[" ","10","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"],textMargin=1,chamfer=.945,af=6*Math.PI/5,tab=0;function createDecahedron(e,t,r,a,l,n,o,s,c,i,h,u,f,p,g,m,d,y,E){let w,M=null==t?h.showNumbers:t,T=null==r?h.toggleTransparent:r,b=null!=e?e:h.presentColor,x=null!=i?i:h.textColor;if(backColor=b,color=x,M)w=new THREE.Mesh(getGeometry(),getMaterials());else if(T){const t=getGeometry(),r=new THREE.WireframeGeometry(t),a=new THREE.LineBasicMaterial({color:null!=e?e:h.presentColor,depthTest:!0,opacity:1,transparent:!1});w=new THREE.LineSegments(r,a)}else{const t=getGeometry(),r=new THREE.MeshStandardMaterial({color:null!=e?e:h.presentColor,wireframe:!1});w=new THREE.Mesh(t,r)}w.rotation.set(Math.PI/4,Math.PI/4,0),w.castShadow=!0,w.userData=E,p.add(w);let A=null==a?xCoordinate:a,N=null==l?zCoordinate:l,C=null==s?10:1;const R=1.5,H=[[0,0,1.5],[0,0,-1.5]];for(let e=0;e<10;++e){const t=e*Math.PI*2/10;H.push([R*Math.cos(t),R*Math.sin(t),.1575*(e%2?1:-1)])}let S=H.map((e=>new CANNON.Vec3(e[0],e[1],e[2])));let v=[[0,2,3],[0,3,4],[0,4,5],[0,5,6],[0,6,7],[0,7,8],[0,8,9],[0,9,10],[0,10,11],[0,11,2],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[1,7,6],[1,8,7],[1,9,8],[1,10,9],[1,11,10],[1,2,11]].map((e=>[e[0],e[1],e[2]]));const V=new CANNON.ConvexPolyhedron({vertices:S,faces:v});let O=new CANNON.Body({mass:2,shape:V,position:new CANNON.Vec3(A,C,N),material:new CANNON.Material,restitution:.3});f.addBody(O),null!=a&&O.sleep();const G=new CANNON.ContactMaterial(g,O.material,{friction:h.friction});f.addContactMaterial(G),O.sleepSpeedLimit=4,O.sleepTimeLimit=10;let I=null==m?.9*Math.random()+.1:m,P=null==d?.9*Math.random()+.1:d,B=null==y?.9*Math.random()+.1:y;O.angularVelocity.set(I,P,B),O.angularDamping=.1,O.applyImpulse(h.offset,h.rollingForce),w.position.copy(O.position),w.quaternion.copy(O.quaternion),null!=c&&null!=c&&(w.quaternion.copy(c),O.quaternion.copy(c)),u.push([w,O,"deca",M,T,b,x,I,P,B,G])}function getGeometry(){let e=1*scaleFactor,t=new Array(vertices.length);for(let e=0;e<vertices.length;++e)t[e]=(new THREE.Vector3).fromArray(vertices[e]).normalize();let r=getChamferGeometry(t),a=makeGeometry(r.vectors,r.faces,e,tab,af);return a.cannon_shape=createShape(t,faces,e),a}function getChamferGeometry(e){let t=[],r=[],a=new Array(e.length);for(let t=0;t<e.length;++t)a[t]=[];for(let l=0;l<faces.length;++l){let n=faces[l],o=n.length-1,s=new THREE.Vector3,c=new Array(o);for(let r=0;r<o;++r){let l=e[n[r]].clone();s.add(l),a[n[r]].push(c[r]=t.push(l)-1)}s.divideScalar(o);for(let e=0;e<o;++e){let r=t[c[e]];r.subVectors(r,s).multiplyScalar(chamfer).addVectors(r,s)}c.push(n[o]),r.push(c)}for(let e=0;e<faces.length-1;++e)for(let t=e+1;t<faces.length;++t){let a=[],l=-1;for(let r=0;r<faces[e].length-1;++r){let n=faces[t].indexOf(faces[e][r]);n>=0&&n<faces[t].length-1&&(l>=0&&r!==l+1?a.unshift([e,r],[t,n]):a.push([e,r],[t,n]),l=r)}4===a.length&&r.push([r[a[0][0]][a[0][1]],r[a[1][0]][a[1][1]],r[a[3][0]][a[3][1]],r[a[2][0]][a[2][1]],-1])}for(let e=0;e<a.length;++e){let t=a[e],l=[t[0]],n=t.length-1;for(;n;){for(let e=faces.length;e<r.length;++e){let a=r[e].indexOf(l[l.length-1]);if(a>=0&&a<4){-1==--a&&(a=3);let n=r[e][a];if(t.indexOf(n)>=0){l.push(n);break}}}--n}l.push(-1),r.push(l)}return{vectors:t,faces:r}}function makeGeometry(e,t,r){let a=new THREE.BufferGeometry;for(let t=0;t<e.length;++t)e[t]=e[t].multiplyScalar(r);let l=[];const n=[],o=[],s=new THREE.Vector3,c=new THREE.Vector3;let i,h=0;for(let r=0;r<t.length;++r){let u=t[r],f=u.length-1,p=2*Math.PI/f;i=u[f]+1;for(let t=0;t<f-2;++t)l.push(...e[u[0]].toArray()),l.push(...e[u[t+1]].toArray()),l.push(...e[u[t+2]].toArray()),s.subVectors(e[u[t+2]],e[u[t+1]]),c.subVectors(e[u[0]],e[u[t+1]]),s.cross(c),s.normalize(),n.push(...s.toArray()),n.push(...s.toArray()),n.push(...s.toArray()),o.push((Math.cos(af)+1+tab)/2/(1+tab),(Math.sin(af)+1+tab)/2/(1+tab)),o.push((Math.cos(p*(t+1)+af)+1+tab)/2/(1+tab),(Math.sin(p*(t+1)+af)+1+tab)/2/(1+tab)),o.push((Math.cos(p*(t+2)+af)+1+tab)/2/(1+tab),(Math.sin(p*(t+2)+af)+1+tab)/2/(1+tab));let g=3*(f-2);for(let e=0;e<g/3;e++)a.addGroup(h,3,i),h+=3}return a.setAttribute("position",new THREE.Float32BufferAttribute(l,3)),a.setAttribute("normal",new THREE.Float32BufferAttribute(n,3)),a.setAttribute("uv",new THREE.Float32BufferAttribute(o,2)),a.boundingSphere=new THREE.Sphere(new THREE.Vector3,r),a}function createShape(e,t,r){let a=new Array(e.length),l=new Array(t.length);for(let t=0;t<e.length;++t){let l=e[t];a[t]=new CANNON.Vec3(l.x*r,l.y*r,l.z*r)}for(let e=0;e<t.length;++e)l[e]=t[e].slice(0,t[e].length-1);return console.log(t),new CANNON.ConvexPolyhedron(a,l)}function getMaterials(){let e=[];for(let t=0;t<faceTexts.length;++t){let r=null;r=createTextTexture(faceTexts[t]),e.push(new THREE.MeshPhongMaterial(Object.assign({},{map:r})))}return e}function createTextTexture(e){let t=document.createElement("canvas"),r=t.getContext("2d"),a=2*calculateTextureSize(.5+1*textMargin);t.width=t.height=a,r.font=a/(1+2*textMargin)+"pt Arial",r.fillStyle=backColor,r.fillRect(0,0,t.width,t.height),r.textAlign="center",r.textBaseline="middle",r.fillStyle=color,r.fillText(e,t.width/2,t.height/2);let l=new THREE.Texture(t);return l.needsUpdate=!0,l}function calculateTextureSize(e){return Math.max(128,Math.pow(2,Math.floor(Math.log(e)/Math.log(2))))}function getDecaScore(e,t,r){let a,l,n=new THREE.Vector3(0,1),o=2*Math.PI,s=t.geometry.getAttribute("normal").array;for(let e=0;e<t.geometry.groups.length;++e){let r=t.geometry.groups[e];if(0===r.materialIndex)continue;let l=9*e,c=new THREE.Vector3(s[l],s[l+1],s[l+2]).clone().applyQuaternion(t.quaternion).angleTo(n);c<o&&(o=c,a=r)}if(l=a.materialIndex-1==0?10:a.materialIndex-1,r)return l;e.lastRoll+=l+" + ",e.presentScore+=l}