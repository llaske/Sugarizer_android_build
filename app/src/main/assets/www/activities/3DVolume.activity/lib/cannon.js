!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("perf_hooks")):"function"==typeof define&&define.amd?define(["exports","perf_hooks"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).CANNON={},t.require$$0)}(this,(function(t,e){"use strict";var s={};class Mat3{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new Vec3);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new Vec3);const s=this.elements,i=t.x,o=t.y,n=t.z;return e.x=s[0]*i+s[1]*o+s[2]*n,e.y=s[3]*i+s[4]*o+s[5]*n,e.z=s[6]*i+s[7]*o+s[8]*n,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new Mat3);const s=this.elements,i=t.elements,o=e.elements,n=s[0],r=s[1],a=s[2],l=s[3],c=s[4],h=s[5],d=s[6],u=s[7],p=s[8],y=i[0],v=i[1],m=i[2],g=i[3],f=i[4],w=i[5],x=i[6],b=i[7],V=i[8];return o[0]=n*y+r*g+a*x,o[1]=n*v+r*f+a*b,o[2]=n*m+r*w+a*V,o[3]=l*y+c*g+h*x,o[4]=l*v+c*f+h*b,o[5]=l*m+c*w+h*V,o[6]=d*y+u*g+p*x,o[7]=d*v+u*f+p*b,o[8]=d*m+u*w+p*V,e}scale(t,e){void 0===e&&(e=new Mat3);const s=this.elements,i=e.elements;for(let e=0;3!==e;e++)i[3*e+0]=t.x*s[3*e+0],i[3*e+1]=t.y*s[3*e+1],i[3*e+2]=t.z*s[3*e+2];return e}solve(t,e){void 0===e&&(e=new Vec3);const s=[];let i,o;for(i=0;i<12;i++)s.push(0);for(i=0;i<3;i++)for(o=0;o<3;o++)s[i+4*o]=this.elements[i+3*o];s[3]=t.x,s[7]=t.y,s[11]=t.z;let n=3;const r=n;let a;let l;do{if(i=r-n,0===s[i+4*i])for(o=i+1;o<r;o++)if(0!==s[i+4*o]){a=4;do{l=4-a,s[l+4*i]+=s[l+4*o]}while(--a);break}if(0!==s[i+4*i])for(o=i+1;o<r;o++){const t=s[i+4*o]/s[i+4*i];a=4;do{l=4-a,s[l+4*o]=l<=i?0:s[l+4*o]-s[l+4*i]*t}while(--a)}}while(--n);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new Mat3);const e=i;let s,o;for(s=0;s<3;s++)for(o=0;o<3;o++)e[s+6*o]=this.elements[s+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let n=3;const r=n;let a;let l;do{if(s=r-n,0===e[s+6*s])for(o=s+1;o<r;o++)if(0!==e[s+6*o]){a=6;do{l=6-a,e[l+6*s]+=e[l+6*o]}while(--a);break}if(0!==e[s+6*s])for(o=s+1;o<r;o++){const t=e[s+6*o]/e[s+6*s];a=6;do{l=6-a,e[l+6*o]=l<=s?0:e[l+6*o]-e[l+6*s]*t}while(--a)}}while(--n);s=2;do{o=s-1;do{const t=e[s+6*o]/e[s+6*s];a=6;do{l=6-a,e[l+6*o]=e[l+6*o]-e[l+6*s]*t}while(--a)}while(o--)}while(--s);s=2;do{const t=1/e[s+6*s];a=6;do{l=6-a,e[l+6*s]=e[l+6*s]*t}while(--a)}while(s--);s=2;do{o=2;do{if(l=e[3+o+6*s],isNaN(l)||l===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(s,o,l)}while(o--)}while(s--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,o=t.w,n=e+e,r=s+s,a=i+i,l=e*n,c=e*r,h=e*a,d=s*r,u=s*a,p=i*a,y=o*n,v=o*r,m=o*a,g=this.elements;return g[0]=1-(d+p),g[1]=c-m,g[2]=h+v,g[3]=c+m,g[4]=1-(l+p),g[5]=u-y,g[6]=h-v,g[7]=u+y,g[8]=1-(l+d),this}transpose(t){void 0===t&&(t=new Mat3);const e=this.elements,s=t.elements;let i;return s[0]=e[0],s[4]=e[4],s[8]=e[8],i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i,t}}const i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class Vec3{constructor(t,e,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){void 0===e&&(e=new Vec3);const s=t.x,i=t.y,o=t.z,n=this.x,r=this.y,a=this.z;return e.x=r*o-a*i,e.y=a*s-n*o,e.z=n*i-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new Vec3(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new Vec3(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new Mat3([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t){void 0===t&&(t=new Vec3);const e=this.x,s=this.y,i=this.z;let o=Math.sqrt(e*e+s*s+i*i);return o>0?(o=1/o,t.x=e*o,t.y=s*o,t.z=i*o):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i)}scale(t,e){void 0===e&&(e=new Vec3);const s=this.x,i=this.y,o=this.z;return e.x=t*s,e.y=t*i,e.z=t*o,e}vmul(t,e){return void 0===e&&(e=new Vec3),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new Vec3),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new Vec3),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=o,r=1/s;i.set(this.x*r,this.y*r,this.z*r);const a=n;Math.abs(i.x)<.9?(a.set(1,0,0),i.cross(a,t)):(a.set(0,1,0),i.cross(a,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,o=this.y,n=this.z;s.x=i+(t.x-i)*e,s.y=o+(t.y-o)*e,s.z=n+(t.z-n)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(r),r.almostEquals(t,e)}clone(){return new Vec3(this.x,this.y,this.z)}}Vec3.ZERO=new Vec3(0,0,0),Vec3.UNIT_X=new Vec3(1,0,0),Vec3.UNIT_Y=new Vec3(0,1,0),Vec3.UNIT_Z=new Vec3(0,0,1);const o=new Vec3,n=new Vec3,r=new Vec3;class AABB{constructor(t){void 0===t&&(t={}),this.lowerBound=new Vec3,this.upperBound=new Vec3,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const o=this.lowerBound,n=this.upperBound,r=s;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let e=1;e<t.length;e++){let s=t[e];r&&(r.vmult(s,a),s=a),s.x>n.x&&(n.x=s.x),s.x<o.x&&(o.x=s.x),s.y>n.y&&(n.y=s.y),s.y<o.y&&(o.y=s.y),s.z>n.z&&(n.z=s.z),s.z<o.z&&(o.z=s.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),i&&(o.x-=i,o.y-=i,o.z-=i,n.x+=i,n.y+=i,n.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new AABB).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound,n=i.x<=s.x&&s.x<=o.x||e.x<=o.x&&o.x<=s.x,r=i.y<=s.y&&s.y<=o.y||e.y<=o.y&&o.y<=s.y,a=i.z<=s.z&&s.z<=o.z||e.z<=o.z&&o.z<=s.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound;return e.x<=i.x&&s.x>=o.x&&e.y<=i.y&&s.y>=o.y&&e.z<=i.z&&s.z>=o.z}getCorners(t,e,s,i,o,n,r,a){const l=this.lowerBound,c=this.upperBound;t.copy(l),e.set(c.x,l.y,l.z),s.set(c.x,c.y,l.z),i.set(l.x,c.y,c.z),o.set(c.x,l.y,c.z),n.set(l.x,c.y,l.z),r.set(l.x,l.y,c.z),a.copy(c)}toLocalFrame(t,e){const s=l,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],c=s[5],h=s[6],d=s[7];this.getCorners(i,o,n,r,a,c,h,d);for(let e=0;8!==e;e++){const i=s[e];t.pointToLocal(i,i)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=l,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],c=s[5],h=s[6],d=s[7];this.getCorners(i,o,n,r,a,c,h,d);for(let e=0;8!==e;e++){const i=s[e];t.pointToWorld(i,i)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*o,c=(this.upperBound.y-s.y)*o,h=(this.lowerBound.z-s.z)*n,d=(this.upperBound.z-s.z)*n,u=Math.max(Math.max(Math.min(r,a),Math.min(l,c)),Math.min(h,d)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,c)),Math.max(h,d));return!(p<0)&&!(u>p)}}const a=new Vec3,l=[new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3];class ArrayCollisionMatrix{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:o}=e;if(o>i){const t=o;o=i,i=t}this.matrix[(i*(i+1)>>1)+o-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class EventTarget{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class Quaternion{constructor(t,e,s,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),void 0===i&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new Vec3),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=c,s=h;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new Quaternion);const s=this.x,i=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,c=t.w;return e.x=s*c+n*r+i*l-o*a,e.y=i*c+n*a+o*r-s*l,e.z=o*c+n*l+s*a-i*r,e.w=n*c-s*r-i*a-o*l,e}inverse(t){void 0===t&&(t=new Quaternion);const e=this.x,s=this.y,i=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+s*s+i*i+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t){return void 0===t&&(t=new Quaternion),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new Vec3);const s=t.x,i=t.y,o=t.z,n=this.x,r=this.y,a=this.z,l=this.w,c=l*s+r*o-a*i,h=l*i+a*s-n*o,d=l*o+n*i-r*s,u=-n*s-r*i-a*o;return e.x=c*l+u*-n+h*-a-d*-r,e.y=h*l+u*-r+d*-n-c*-a,e.z=d*l+u*-a+c*-r-h*-n,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let s,i,o;void 0===e&&(e="YZX");const n=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=n*r+a*l;if(t>.499&&(s=2*Math.atan2(n,l),i=Math.PI/2,o=0),t<-.499&&(s=-2*Math.atan2(n,l),i=-Math.PI/2,o=0),void 0===s){const e=n*n,c=r*r,h=a*a;s=Math.atan2(2*r*l-2*n*a,1-2*c-2*h),i=Math.asin(2*t),o=Math.atan2(2*n*l-2*r*a,1-2*e-2*h)}}t.y=s,t.z=i,t.x=o}setFromEuler(t,e,s,i){void 0===i&&(i="XYZ");const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),c=Math.sin(s/2);return"XYZ"===i?(this.x=a*n*r+o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r-a*l*c):"YXZ"===i?(this.x=a*n*r+o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r+a*l*c):"ZXY"===i?(this.x=a*n*r-o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r-a*l*c):"ZYX"===i?(this.x=a*n*r-o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r+a*l*c):"YZX"===i?(this.x=a*n*r+o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r-a*l*c):"XZY"===i&&(this.x=a*n*r-o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r+a*l*c),this}clone(){return new Quaternion(this.x,this.y,this.z,this.w)}slerp(t,e,s){void 0===s&&(s=new Quaternion);const i=this.x,o=this.y,n=this.z,r=this.w;let a,l,c,h,d,u=t.x,p=t.y,y=t.z,v=t.w;return l=i*u+o*p+n*y+r*v,l<0&&(l=-l,u=-u,p=-p,y=-y,v=-v),1-l>1e-6?(a=Math.acos(l),c=Math.sin(a),h=Math.sin((1-e)*a)/c,d=Math.sin(e*a)/c):(h=1-e,d=e),s.x=h*i+d*u,s.y=h*o+d*p,s.z=h*n+d*y,s.w=h*r+d*v,s}integrate(t,e,s,i){void 0===i&&(i=new Quaternion);const o=t.x*s.x,n=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,c=this.z,h=this.w,d=.5*e;return i.x+=d*(o*h+n*c-r*l),i.y+=d*(n*h+r*a-o*c),i.z+=d*(r*h+o*l-n*a),i.w+=d*(-o*a-n*l-r*c),i}}const c=new Vec3,h=new Vec3,d={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class Shape{constructor(t){void 0===t&&(t={}),this.id=Shape.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}Shape.idCounter=0,Shape.types=d;class Transform{constructor(t){void 0===t&&(t={}),this.position=new Vec3,this.quaternion=new Quaternion,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return Transform.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return Transform.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new Vec3),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return void 0===i&&(i=new Vec3),s.vsub(t,i),e.conjugate(u),u.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return void 0===i&&(i=new Vec3),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new Vec3),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return void 0===i&&(i=new Vec3),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const u=new Quaternion;class ConvexPolyhedron extends Shape{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:o,boundingSphereRadius:n}=t;super({type:Shape.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new Vec3;for(let o=0;o!==t.length;o++){const n=t[o],r=n.length;for(let t=0;t!==r;t++){const o=(t+1)%r;e[n[t]].vsub(e[n[o]],i),i.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(i)||s[t].almostEquals(i)){a=!0;break}a||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error(`Vertex ${this.faces[t][e]} not found!`);const e=this.faceNormals[t]||new Vec3;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],o=this.vertices[s[1]],n=this.vertices[s[2]];ConvexPolyhedron.computeNormal(i,o,n,e)}static computeNormal(t,e,s,i){const o=new Vec3,n=new Vec3;e.vsub(t,n),s.vsub(e,o),o.cross(n,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,o,n,r,a,l){const c=new Vec3;let h=-1,d=-Number.MAX_VALUE;for(let t=0;t<s.faces.length;t++){c.copy(s.faceNormals[t]),o.vmult(c,c);const e=c.dot(n);e>d&&(d=e,h=t)}const u=[];for(let t=0;t<s.faces[h].length;t++){const e=s.vertices[s.faces[h][t]],n=new Vec3;n.copy(e),o.vmult(n,n),i.vadd(n,n),u.push(n)}h>=0&&this.clipFaceAgainstHull(n,t,e,u,r,a,l)}findSeparatingAxis(t,e,s,i,o,n,r,a){const l=new Vec3,c=new Vec3,h=new Vec3,d=new Vec3,u=new Vec3,p=new Vec3;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let r=0;r!==v.uniqueAxes.length;r++){s.vmult(v.uniqueAxes[r],l);const a=v.testSepAxis(l,t,e,s,i,o);if(!1===a)return!1;a<y&&(y=a,n.copy(l))}else{const a=r?r.length:v.faces.length;for(let c=0;c<a;c++){const a=r?r[c]:c;l.copy(v.faceNormals[a]),s.vmult(l,l);const h=v.testSepAxis(l,t,e,s,i,o);if(!1===h)return!1;h<y&&(y=h,n.copy(l))}}if(t.uniqueAxes)for(let r=0;r!==t.uniqueAxes.length;r++){o.vmult(t.uniqueAxes[r],c);const a=v.testSepAxis(c,t,e,s,i,o);if(!1===a)return!1;a<y&&(y=a,n.copy(c))}else{const r=a?a.length:t.faces.length;for(let l=0;l<r;l++){const r=a?a[l]:l;c.copy(t.faceNormals[r]),o.vmult(c,c);const h=v.testSepAxis(c,t,e,s,i,o);if(!1===h)return!1;h<y&&(y=h,n.copy(c))}}for(let r=0;r!==v.uniqueEdges.length;r++){s.vmult(v.uniqueEdges[r],d);for(let r=0;r!==t.uniqueEdges.length;r++)if(o.vmult(t.uniqueEdges[r],u),d.cross(u,p),!p.almostZero()){p.normalize();const r=v.testSepAxis(p,t,e,s,i,o);if(!1===r)return!1;r<y&&(y=r,n.copy(p))}}return i.vsub(e,h),h.dot(n)>0&&n.negate(n),!0}testSepAxis(t,e,s,i,o,n){ConvexPolyhedron.project(this,t,s,i,p),ConvexPolyhedron.project(e,t,o,n,y);const r=p[0],a=p[1],l=y[0],c=y[1];if(r<c||l<a)return!1;const h=r-c,d=l-a;return h<d?h:d}calculateLocalInertia(t,e){const s=new Vec3,i=new Vec3;this.computeLocalAABB(i,s);const o=s.x-i.x,n=s.y-i.y,r=s.z-i.z;e.x=1/12*t*(2*n*2*n+2*r*2*r),e.y=1/12*t*(2*o*2*o+2*r*2*r),e.z=1/12*t*(2*n*2*n+2*o*2*o)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,o,n,r){const a=new Vec3,l=new Vec3,c=new Vec3,h=new Vec3,d=new Vec3,u=new Vec3,p=new Vec3,y=new Vec3,v=this,m=i,g=[];let f=-1,w=Number.MAX_VALUE;for(let e=0;e<v.faces.length;e++){a.copy(v.faceNormals[e]),s.vmult(a,a);const i=a.dot(t);i<w&&(w=i,f=e)}if(f<0)return;const x=v.faces[f];x.connectedFaces=[];for(let t=0;t<v.faces.length;t++)for(let e=0;e<v.faces[t].length;e++)-1!==x.indexOf(v.faces[t][e])&&t!==f&&-1===x.connectedFaces.indexOf(t)&&x.connectedFaces.push(t);const b=x.length;for(let t=0;t<b;t++){const i=v.vertices[x[t]],o=v.vertices[x[(t+1)%b]];i.vsub(o,l),c.copy(l),s.vmult(c,c),e.vadd(c,c),h.copy(this.faceNormals[f]),s.vmult(h,h),e.vadd(h,h),c.cross(h,d),d.negate(d),u.copy(i),s.vmult(u,u),e.vadd(u,u);const n=x.connectedFaces[t];p.copy(this.faceNormals[n]);const r=this.getPlaneConstantOfFace(n);y.copy(p),s.vmult(y,y);const a=r-y.dot(e);for(this.clipFaceAgainstPlane(m,g,y,a);m.length;)m.shift();for(;g.length;)m.push(g.shift())}p.copy(this.faceNormals[f]);const V=this.getPlaneConstantOfFace(f);y.copy(p),s.vmult(y,y);const B=V-y.dot(e);for(let t=0;t<m.length;t++){let e=y.dot(m[t])+B;if(e<=o&&(console.log(`clamped: depth=${e} to minDist=${o}`),e=o),e<=n){const s=m[t];if(e<=1e-6){const t={point:s,normal:y,depth:e};r.push(t)}}}}clipFaceAgainstPlane(t,e,s,i){let o,n;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];o=s.dot(a)+i;for(let c=0;c<r;c++){if(l=t[c],n=s.dot(l)+i,o<0)if(n<0){const t=new Vec3;t.copy(l),e.push(t)}else{const t=new Vec3;a.lerp(l,o/(o-n),t),e.push(t)}else if(n<0){const t=new Vec3;a.lerp(l,o/(o-n),t),e.push(t),e.push(l)}a=l,o=n}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new Vec3);const s=this.vertices,i=this.worldVertices;for(let o=0;o!==this.vertices.length;o++)e.vmult(s[o],i[o]),t.vadd(i[o],i[o]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=s[i];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new Vec3);const s=this.faceNormals,i=this.worldFaceNormals;for(let o=0;o!==e;o++)t.vmult(s[o],i[o]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=this.vertices;let n,r,a,l,c,h,d=new Vec3;for(let s=0;s<o.length;s++){d.copy(o[s]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===n||i.x<n)&&(n=i.x),(void 0===l||i.x>l)&&(l=i.x),(void 0===r||i.y<r)&&(r=i.y),(void 0===c||i.y>c)&&(c=i.y),(void 0===a||i.z<a)&&(a=i.z),(void 0===h||i.z>h)&&(h=i.z)}s.set(n,r,a),i.set(l,c,h)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new Vec3);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let e=0;e<s;e++){const s=i[e];s.vadd(t,s)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,o=new Vec3;this.getAveragePointLocal(o);for(let n=0;n<this.faces.length;n++){let r=i[n];const a=e[s[n][0]],l=new Vec3;t.vsub(a,l);const c=r.dot(l),h=new Vec3;o.vsub(a,h);const d=r.dot(h);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,s,i,o){const n=t.vertices.length,r=v;let a=0,l=0;const c=m,h=t.vertices;c.setZero(),Transform.vectorToLocalFrame(s,i,e,r),Transform.pointToLocalFrame(s,i,c,c);const d=c.dot(r);l=a=h[0].dot(r);for(let t=1;t<n;t++){const e=h[t].dot(r);e>a&&(a=e),e<l&&(l=e)}if(l-=d,a-=d,l>a){const t=l;l=a,a=t}o[0]=a,o[1]=l}}const p=[],y=[];new Vec3;const v=new Vec3,m=new Vec3;class Box extends Shape{constructor(t){super({type:Shape.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=Vec3,o=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],n=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],r=new ConvexPolyhedron({vertices:o,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:n});this.convexPolyhedronRepresentation=r,r.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new Vec3),Box.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let t=0;t!==s.length;t++)e.vmult(s[t],s[t]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let i=0;i<o.length;i++)g.set(o[i][0],o[i][1],o[i][2]),e.vmult(g,g),t.vadd(g,g),s(g.x,g.y,g.z)}calculateWorldAABB(t,e,s,i){const o=this.halfExtents;f[0].set(o.x,o.y,o.z),f[1].set(-o.x,o.y,o.z),f[2].set(-o.x,-o.y,o.z),f[3].set(-o.x,-o.y,-o.z),f[4].set(o.x,-o.y,-o.z),f[5].set(o.x,o.y,-o.z),f[6].set(-o.x,o.y,-o.z),f[7].set(o.x,-o.y,o.z);const n=f[0];e.vmult(n,n),t.vadd(n,n),i.copy(n),s.copy(n);for(let o=1;o<8;o++){const n=f[o];e.vmult(n,n),t.vadd(n,n);const r=n.x,a=n.y,l=n.z;r>i.x&&(i.x=r),a>i.y&&(i.y=a),l>i.z&&(i.z=l),r<s.x&&(s.x=r),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}const g=new Vec3,f=[new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3],w={DYNAMIC:1,STATIC:2,KINEMATIC:4},x={AWAKE:0,SLEEPY:1,SLEEPING:2};class Body extends EventTarget{constructor(t){void 0===t&&(t={}),super(),this.id=Body.idCounter++,this.index=-1,this.world=null,this.vlambda=new Vec3,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new Vec3,this.previousPosition=new Vec3,this.interpolatedPosition=new Vec3,this.initPosition=new Vec3,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new Vec3,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new Vec3,this.force=new Vec3;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?Body.STATIC:Body.DYNAMIC,typeof t.type==typeof Body.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=Body.AWAKE,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new Vec3,this.quaternion=new Quaternion,this.initQuaternion=new Quaternion,this.previousQuaternion=new Quaternion,this.interpolatedQuaternion=new Quaternion,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new Vec3,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new Vec3,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new Vec3,this.invInertia=new Vec3,this.invInertiaWorld=new Mat3,this.invMassSolve=0,this.invInertiaSolve=new Vec3,this.invInertiaWorldSolve=new Mat3,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new Vec3(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new Vec3(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new AABB,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new Vec3,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=Body.AWAKE,this.wakeUpAfterNarrowphase=!1,t===Body.SLEEPING&&this.dispatchEvent(Body.wakeupEvent)}sleep(){this.sleepState=Body.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===Body.AWAKE&&s<i?(this.sleepState=Body.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(Body.sleepyEvent)):e===Body.SLEEPY&&s>i?this.wakeUp():e===Body.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(Body.sleepEvent))}}updateSolveMassProperties(){this.sleepState===Body.SLEEPING||this.type===Body.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new Vec3),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new Vec3),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new Vec3),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new Vec3),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new Vec3,o=new Quaternion;return e&&i.copy(e),s&&o.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(o),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let o=0;o!==s;o++){const s=t[o];s.updateBoundingSphereRadius();const n=e[o].length(),r=s.boundingSphereRadius;n+r>i&&(i=n+r)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,o=b,n=V,r=this.quaternion,a=this.aabb,l=B;for(let c=0;c!==i;c++){const i=t[c];r.vmult(e[c],o),o.vadd(this.position,o),r.mult(s[c],n),i.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),0===c?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=A,s=S;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new Vec3),this.type!==Body.DYNAMIC)return;this.sleepState===Body.SLEEPING&&this.wakeUp();const s=E;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new Vec3),this.type!==Body.DYNAMIC)return;const s=C,i=z;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===Body.DYNAMIC&&(this.sleepState===Body.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new Vec3),this.type!==Body.DYNAMIC)return;this.sleepState===Body.SLEEPING&&this.wakeUp();const s=e,i=T;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=R;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new Vec3),this.type!==Body.DYNAMIC)return;const s=M,i=P;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=F;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Box.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new Vec3;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==Body.DYNAMIC&&this.type!==Body.KINEMATIC||this.sleepState===Body.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,c=this.invMass,h=this.invInertiaWorld,d=this.linearFactor,u=c*t;i.x+=r.x*u*d.x,i.y+=r.y*u*d.y,i.z+=r.z*u*d.z;const p=h.elements,y=this.angularFactor,v=a.x*y.x,m=a.y*y.y,g=a.z*y.z;o.x+=t*(p[0]*v+p[1]*m+p[2]*g),o.y+=t*(p[3]*v+p[4]*m+p[5]*g),o.z+=t*(p[6]*v+p[7]*m+p[8]*g),n.x+=i.x*t,n.y+=i.y*t,n.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}Body.idCounter=0,Body.COLLIDE_EVENT_NAME="collide",Body.DYNAMIC=w.DYNAMIC,Body.STATIC=w.STATIC,Body.KINEMATIC=w.KINEMATIC,Body.AWAKE=x.AWAKE,Body.SLEEPY=x.SLEEPY,Body.SLEEPING=x.SLEEPING,Body.wakeupEvent={type:"wakeup"},Body.sleepyEvent={type:"sleepy"},Body.sleepEvent={type:"sleep"};const b=new Vec3,V=new Quaternion,B=new AABB,A=new Mat3,S=new Mat3;new Mat3;const E=new Vec3,C=new Vec3,z=new Vec3,T=new Vec3,R=new Vec3,M=new Vec3,P=new Vec3,F=new Vec3;class Broadphase{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&Body.STATIC)&&t.sleepState!==Body.SLEEPING||0==(e.type&Body.STATIC)&&e.sleepState!==Body.SLEEPING)}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const o=q;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=I,i=N,o=L,n=t.length;for(let s=0;s!==n;s++)i[s]=t[s],o[s]=e[s];t.length=0,e.length=0;for(let t=0;t!==n;t++){const e=i[t].id,n=o[t].id,r=e<n?`${e},${n}`:`${n},${e}`;s[r]=t,s.keys.push(r)}for(let n=0;n!==s.keys.length;n++){const n=s.keys.pop(),r=s[n];t.push(i[r]),e.push(o[r]),delete s[n]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new Vec3;t.position.vsub(e.position,s);const i=t.shapes[0],o=e.shapes[0];return Math.pow(i.boundingSphereRadius+o.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const q=new Vec3;new Vec3,new Quaternion,new Vec3;const I={keys:[]},N=[],L=[];new Vec3;const W=new Vec3;new Vec3;class NaiveBroadphase extends Broadphase{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,o=i.length;let n,r;for(let t=0;t!==o;t++)for(let o=0;o!==t;o++)n=i[t],r=i[o],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,s)}aabbQuery(t,e,s){void 0===s&&(s=[]);for(let i=0;i<t.bodies.length;i++){const o=t.bodies[i];o.aabbNeedsUpdate&&o.updateAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class RaycastResult{constructor(){this.rayFromWorld=new Vec3,this.rayToWorld=new Vec3,this.hitNormalWorld=new Vec3,this.hitPointWorld=new Vec3,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=o,this.body=n,this.distance=r}}let j,O,k,_,H,D,U;const G={CLOSEST:1,ANY:2,ALL:4};j=Shape.types.SPHERE,O=Shape.types.PLANE,k=Shape.types.BOX,_=Shape.types.CYLINDER,H=Shape.types.CONVEXPOLYHEDRON,D=Shape.types.HEIGHTFIELD,U=Shape.types.TRIMESH;class Ray{get[j](){return this._intersectSphere}get[O](){return this._intersectPlane}get[k](){return this._intersectBox}get[_](){return this._intersectConvex}get[H](){return this._intersectConvex}get[D](){return this._intersectHeightfield}get[U](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new Vec3),void 0===e&&(e=new Vec3),this.from=t.clone(),this.to=e.clone(),this.direction=new Vec3,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Ray.ANY,this.result=new RaycastResult,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||Ray.ANY,this.result=e.result||new RaycastResult,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Y),X.length=0,t.broadphase.aabbQuery(t,Y,X),this.intersectBodies(X),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const i=K,o=Z;for(let e=0,n=t.shapes.length;e<n;e++){const n=t.shapes[e];if((!s||n.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],o),t.quaternion.vmult(t.shapeOffsets[e],i),i.vadd(t.position,i),this.intersectShape(n,o,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,s=t.length;!this.result.shouldStop&&e<s;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const o=function distanceFromIntersection(t,e,s){s.vsub(t,wt);const i=wt.dot(e);e.scale(i,xt),xt.vadd(t,xt);const o=s.distanceTo(xt);return o}(this.from,this.direction,s);if(o>t.boundingSphereRadius)return;const n=this[t.type];n&&n.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,o)}_intersectPlane(t,e,s,i,o){const n=this.from,r=this.to,a=this.direction,l=new Vec3(0,0,1);e.vmult(l,l);const c=new Vec3;n.vsub(s,c);const h=c.dot(l);r.vsub(s,c);if(h*c.dot(l)>0)return;if(n.distanceTo(r)<h)return;const d=l.dot(a);if(Math.abs(d)<this.precision)return;const u=new Vec3,p=new Vec3,y=new Vec3;n.vsub(s,u);const v=-l.dot(u)/d;a.scale(v,p),n.vadd(p,y),this.reportIntersection(l,y,o,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,o=this.from;e.x=Math.min(i.x,o.x),e.y=Math.min(i.y,o.y),e.z=Math.min(i.z,o.z),s.x=Math.max(i.x,o.x),s.y=Math.max(i.y,o.y),s.z=Math.max(i.z,o.z)}_intersectHeightfield(t,e,s,i,o){t.data,t.elementSize;const n=nt;n.from.copy(this.from),n.to.copy(this.to),Transform.pointToLocalFrame(s,e,n.from,n.from),Transform.pointToLocalFrame(s,e,n.to,n.to),n.updateDirection();const r=rt;let a,l,c,h;a=l=0,c=h=t.data.length-1;const d=new AABB;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),h=Math.min(h,r[1]+1);for(let r=a;r<c;r++)for(let a=l;a<h;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(n)){if(t.getConvexTrianglePillar(r,a,!1),Transform.pointToWorldFrame(s,e,t.pillarOffset,ot),this._intersectConvex(t.pillarConvex,e,ot,i,o,it),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),Transform.pointToWorldFrame(s,e,t.pillarOffset,ot),this._intersectConvex(t.pillarConvex,e,ot,i,o,it)}}}_intersectSphere(t,e,s,i,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,c=2*((r.x-n.x)*(n.x-s.x)+(r.y-n.y)*(n.y-s.y)+(r.z-n.z)*(n.z-s.z)),h=c**2-4*l*((n.x-s.x)**2+(n.y-s.y)**2+(n.z-s.z)**2-a**2),d=at,u=lt;if(!(h<0))if(0===h)n.lerp(r,h,d),d.vsub(s,u),u.normalize(),this.reportIntersection(u,d,o,i,-1);else{const t=(-c-Math.sqrt(h))/(2*l),e=(-c+Math.sqrt(h))/(2*l);if(t>=0&&t<=1&&(n.lerp(r,t,d),d.vsub(s,u),u.normalize(),this.reportIntersection(u,d,o,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(n.lerp(r,e,d),d.vsub(s,u),u.normalize(),this.reportIntersection(u,d,o,i,-1))}}_intersectConvex(t,e,s,i,o,n){const r=ct,a=ht,l=n&&n.faceList||null,c=t.faces,h=t.vertices,d=t.faceNormals,u=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),m=l?l.length:c.length,g=this.result;for(let t=0;!g.shouldStop&&t<m;t++){const n=l?l[t]:t,y=c[n],m=d[n],f=e,w=s;a.copy(h[y[0]]),f.vmult(a,a),a.vadd(w,a),a.vsub(p,a),f.vmult(m,r);const x=u.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){u.scale(b,J),J.vadd(p,J),tt.copy(h[y[0]]),f.vmult(tt,tt),w.vadd(tt,tt);for(let t=1;!g.shouldStop&&t<y.length-1;t++){et.copy(h[y[t]]),st.copy(h[y[t+1]]),f.vmult(et,et),f.vmult(st,st),w.vadd(et,et),w.vadd(st,st);const e=J.distanceTo(p);!Ray.pointInTriangle(J,tt,et,st)&&!Ray.pointInTriangle(J,et,tt,st)||e>v||this.reportIntersection(r,J,o,i,n)}}}}_intersectTrimesh(t,e,s,i,o,n){const r=dt,a=gt,l=ft,c=ht,h=ut,d=pt,u=yt,p=mt,y=vt,v=t.indices;t.vertices;const m=this.from,g=this.to,f=this.direction;l.position.copy(s),l.quaternion.copy(e),Transform.vectorToLocalFrame(s,e,f,h),Transform.pointToLocalFrame(s,e,m,d),Transform.pointToLocalFrame(s,e,g,u),u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.vsub(d,h),h.normalize();const w=d.distanceSquared(u);t.tree.rayQuery(this,l,a);for(let n=0,l=a.length;!this.result.shouldStop&&n!==l;n++){const l=a[n];t.getNormal(l,r),t.getVertex(v[3*l],tt),tt.vsub(d,c);const u=h.dot(r),m=r.dot(c)/u;if(m<0)continue;h.scale(m,J),J.vadd(d,J),t.getVertex(v[3*l+1],et),t.getVertex(v[3*l+2],st);const g=J.distanceSquared(d);!Ray.pointInTriangle(J,et,tt,st)&&!Ray.pointInTriangle(J,tt,et,st)||g>w||(Transform.vectorToWorldFrame(e,r,y),Transform.pointToWorldFrame(s,e,J,p),this.reportIntersection(y,p,o,i,l))}a.length=0}reportIntersection(t,e,s,i,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==o?o:-1,this.mode){case Ray.ALL:this.hasHit=!0,l.set(n,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case Ray.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a));break;case Ray.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a),l.shouldStop=!0}}static pointInTriangle(t,e,s,i){i.vsub(e,wt),s.vsub(e,Q),t.vsub(e,$);const o=wt.dot(wt),n=wt.dot(Q),r=wt.dot($),a=Q.dot(Q),l=Q.dot($);let c,h;return(c=a*r-n*l)>=0&&(h=o*l-n*r)>=0&&c+h<o*a-n*n}}Ray.CLOSEST=G.CLOSEST,Ray.ANY=G.ANY,Ray.ALL=G.ALL;const Y=new AABB,X=[],Q=new Vec3,$=new Vec3,K=new Vec3,Z=new Quaternion,J=new Vec3,tt=new Vec3,et=new Vec3,st=new Vec3;new Vec3,new RaycastResult;const it={faceList:[0]},ot=new Vec3,nt=new Ray,rt=[],at=new Vec3,lt=new Vec3,ct=new Vec3;new Vec3,new Vec3;const ht=new Vec3,dt=new Vec3,ut=new Vec3,pt=new Vec3,yt=new Vec3,vt=new Vec3,mt=new Vec3;new AABB;const gt=[],ft=new Transform,wt=new Vec3,xt=new Vec3;class SAPBroadphase extends Broadphase{static checkBounds(t,e,s){let i,o;0===s?(i=t.position.x,o=e.position.x):1===s?(i=t.position.y,o=e.position.y):2===s&&(i=t.position.z,o=e.position.z);const n=t.boundingRadius;return o-e.boundingRadius<i+n}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=s.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=s}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=s.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=s}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=s.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=s}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const s=e.indexOf(t.body);-1!==s&&e.splice(s,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,o=i.length,n=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==o;r++){const t=i[r];for(a=r+1;a<o;a++){const o=i[a];if(this.needBroadphaseCollision(t,o)){if(!SAPBroadphase.checkBounds(t,o,n))break;this.intersectionTest(t,o,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let e=0;e!==s;e++){const s=t[e];s.aabbNeedsUpdate&&s.updateAABB()}0===e?SAPBroadphase.insertionSortX(t):1===e?SAPBroadphase.insertionSortY(t):2===e&&SAPBroadphase.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,o=0,n=0;const r=this.axisList,a=r.length,l=1/a;for(let l=0;l!==a;l++){const a=r[l],c=a.position.x;t+=c,e+=c*c;const h=a.position.y;s+=h,i+=h*h;const d=a.position.z;o+=d,n+=d*d}const c=e-t*t*l,h=i-s*s*l,d=n-o*o*l;this.axisIndex=c>h?c>d?0:2:h>d?1:2}aabbQuery(t,e,s){void 0===s&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let o="x";1===i&&(o="y"),2===i&&(o="z");const n=this.axisList;e.lowerBound[o],e.upperBound[o];for(let t=0;t<n.length;t++){const i=n[t];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Utils{static defaults(t,e){void 0===t&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Constraint{constructor(t,e,s){void 0===s&&(s={}),s=Utils.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Constraint.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Constraint.idCounter=0;class JacobianElement{constructor(){this.spatial=new Vec3,this.rotational=new Vec3}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Equation{constructor(t,e,s,i){void 0===s&&(s=-1e6),void 0===i&&(i=1e6),this.id=Equation.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new JacobianElement,this.jacobianElementB=new JacobianElement,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,o=t,n=s;this.a=4/(n*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(n*n*o*(1+4*i))}computeB(t,e,s){const i=this.computeGW();return-this.computeGq()*t-i*e-this.computeGiMf()*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.position,n=i.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.velocity,n=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.vlambda,n=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.force,n=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,c=i.invMassSolve;return o.scale(l,bt),r.scale(c,Vt),s.invInertiaWorldSolve.vmult(n,Bt),i.invInertiaWorldSolve.vmult(a,At),t.multiplyVectors(bt,Bt)+e.multiplyVectors(Vt,At)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.invMassSolve,n=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,St),l+=St.dot(t.rotational),a.vmult(e.rotational,St),l+=St.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,o=this.bj,n=Et;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,s.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,n),i.wlambda.addScaledVector(t,n,i.wlambda),o.invInertiaWorldSolve.vmult(s.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Equation.idCounter=0;const bt=new Vec3,Vt=new Vec3,Bt=new Vec3,At=new Vec3,St=new Vec3,Et=new Vec3;class ContactEquation extends Equation{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new Vec3,this.rj=new Vec3,this.ni=new Vec3}computeB(t){const e=this.a,s=this.b,i=this.bi,o=this.bj,n=this.ri,r=this.rj,a=Ct,l=zt,c=i.velocity,h=i.angularVelocity;i.force,i.torque;const d=o.velocity,u=o.angularVelocity;o.force,o.torque;const p=Tt,y=this.jacobianElementA,v=this.jacobianElementB,m=this.ni;n.cross(m,a),r.cross(m,l),m.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(m),v.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(n,p);const g=m.dot(p),f=this.restitution+1;return-g*e-(f*d.dot(m)-f*c.dot(m)+u.dot(l)-h.dot(a))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Rt,e=Mt,s=Pt,i=Ft,o=qt;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,o),this.ni.dot(o)}}const Ct=new Vec3,zt=new Vec3,Tt=new Vec3,Rt=new Vec3,Mt=new Vec3,Pt=new Vec3,Ft=new Vec3,qt=new Vec3;class PointToPointConstraint extends Constraint{constructor(t,e,s,i,o){void 0===e&&(e=new Vec3),void 0===i&&(i=new Vec3),void 0===o&&(o=1e6),super(t,s),this.pivotA=e.clone(),this.pivotB=i.clone();const n=this.equationX=new ContactEquation(t,s),r=this.equationY=new ContactEquation(t,s),a=this.equationZ=new ContactEquation(t,s);this.equations.push(n,r,a),n.minForce=r.minForce=a.minForce=-o,n.maxForce=r.maxForce=a.maxForce=o,n.ni.set(1,0,0),r.ni.set(0,1,0),a.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,i=this.equationY,o=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),o.ri.copy(s.ri),o.rj.copy(s.rj)}}class ConeEquation extends Equation{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new Vec3(1,0,0),this.axisB=s.axisB?s.axisB.clone():new Vec3(0,1,0),this.angle=void 0!==s.angle?s.angle:0}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=It,r=Nt,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.angle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const It=new Vec3,Nt=new Vec3;class RotationalEquation extends Equation{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new Vec3(1,0,0),this.axisB=s.axisB?s.axisB.clone():new Vec3(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Lt,r=Wt,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.maxAngle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const Lt=new Vec3,Wt=new Vec3;new Vec3,new Vec3;new Vec3,new Vec3;class RotationalMotorEquation extends Equation{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,-s,s),this.axisA=new Vec3,this.axisB=new Vec3,this.targetVelocity=0}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.axisA,i=this.axisB,o=this.jacobianElementA,n=this.jacobianElementB;o.rotational.copy(s),i.negate(n.rotational);return-(this.computeGW()-this.targetVelocity)*e-t*this.computeGiMf()}}class HingeConstraint extends PointToPointConstraint{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new Vec3,e,s.pivotB?s.pivotB.clone():new Vec3,i);(this.axisA=s.axisA?s.axisA.clone():new Vec3(1,0,0)).normalize();(this.axisB=s.axisB?s.axisB.clone():new Vec3(1,0,0)).normalize(),this.collideConnected=!!s.collideConnected;const o=this.rotationalEquation1=new RotationalEquation(t,e,s),n=this.rotationalEquation2=new RotationalEquation(t,e,s),r=this.motorEquation=new RotationalMotorEquation(t,e,i);r.enabled=!1,this.equations.push(o,n,r)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,i=this.rotationalEquation1,o=this.rotationalEquation2,n=jt,r=Ot,a=this.axisA,l=this.axisB;super.update(),t.quaternion.vmult(a,n),e.quaternion.vmult(l,r),n.tangents(i.axisA,o.axisA),i.axisB.copy(r),o.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const jt=new Vec3,Ot=new Vec3;class FrictionEquation extends Equation{constructor(t,e,s){super(t,e,-s,s),this.ri=new Vec3,this.rj=new Vec3,this.t=new Vec3}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,o=kt,n=_t,r=this.t;s.cross(r,o),i.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);return-this.computeGW()*e-t*this.computeGiMf()}}const kt=new Vec3,_t=new Vec3;class ContactMaterial{constructor(t,e,s){s=Utils.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=ContactMaterial.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}ContactMaterial.idCounter=0;class Material{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=Material.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}Material.idCounter=0;const Ht=new Vec3,Dt=new Vec3,Ut=new Vec3,Gt=new Vec3,Yt=new Vec3,Xt=new Vec3,Qt=new Vec3,$t=new Vec3,Kt=new Vec3,Zt=new Vec3,Jt=new Vec3;class WheelInfo{constructor(t){void 0===t&&(t={}),t=Utils.defaults(t,{chassisConnectionPointLocal:new Vec3,chassisConnectionPointWorld:new Vec3,directionLocal:new Vec3,directionWorld:new Vec3,axleLocal:new Vec3,axleWorld:new Vec3,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new RaycastResult,this.worldTransform=new Transform,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ee),t.getVelocityAtWorldPoint(ee,te);const i=e.hitNormalWorld.dot(te);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=10;else{const t=-1/s;this.suspensionRelativeVelocity=i*t,this.clippedInvContactDotSuspension=t}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const te=new Vec3,ee=new Vec3;new Vec3,new Vec3,new Vec3;const se=new Vec3,ie=new Vec3,oe=new Vec3;new Ray,new Vec3;const ne=new Vec3,re=new Vec3,ae=[new Vec3(1,0,0),new Vec3(0,1,0),new Vec3(0,0,1)],le=new Vec3,ce=[],he=[],de=1,ue=new Vec3,pe=new Vec3,ye=new Vec3;function calcRollingFriction(t,e,s,i,o){let n=0;const r=s,a=ue,l=pe,c=ye;t.getVelocityAtWorldPoint(r,a),e.getVelocityAtWorldPoint(r,l),a.vsub(l,c);return n=-i.dot(c)*(1/(computeImpulseDenominator(t,s,i)+computeImpulseDenominator(e,s,i))),o<n&&(n=o),n<-o&&(n=-o),n}const ve=new Vec3,me=new Vec3,ge=new Vec3,fe=new Vec3;function computeImpulseDenominator(t,e,s){const i=ve,o=me,n=ge,r=fe;return e.vsub(t.position,i),i.cross(s,o),t.invInertiaWorld.vmult(o,r),r.cross(i,n),t.invMass+s.dot(n)}const we=new Vec3,xe=new Vec3,be=new Vec3;function resolveSingleBilateral(t,e,s,i,o){if(o.lengthSquared()>1.1)return 0;const n=we,r=xe,a=be;t.getVelocityAtWorldPoint(e,n),s.getVelocityAtWorldPoint(i,r),n.vsub(r,a);return-.2*o.dot(a)*(1/(t.invMass+s.invMass))}class Sphere extends Shape{constructor(t){if(super({type:Shape.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new Vec3);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const o=this.radius,n=["x","y","z"];for(let e=0;e<n.length;e++){const r=n[e];s[r]=t[r]-o,i[r]=t[r]+o}}}const Ve=new Vec3,Be=new Vec3;const Ae=new Vec3,Se=new Vec3,Ee=new Vec3,Ce=new Vec3,ze=new Vec3,Te=new Vec3,Re=new Vec3;const Me=new Vec3;const Pe=[],Fe=new Vec3,qe=new Vec3,Ie=new Vec3,Ne=new Vec3,Le=new Vec3,We=new Vec3,je=new Vec3,Oe=new Vec3,ke=new Vec3;class OctreeNode{constructor(t){void 0===t&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new AABB,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){void 0===s&&(s=0);const i=this.data;if(!this.aabb.contains(t))return!1;const o=this.children;if(s<(this.maxDepth||this.root.maxDepth)){let i=!1;o.length||(this.subdivide(),i=!0);for(let i=0;8!==i;i++)if(o[i].insert(t,e,s+1))return!0;i&&(o.length=0)}return i.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,i=this.children;i.push(new OctreeNode({aabb:new AABB({lowerBound:new Vec3(0,0,0)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(1,0,0)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(1,1,0)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(1,1,1)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(0,1,1)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(0,0,1)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(1,0,1)})}),new OctreeNode({aabb:new AABB({lowerBound:new Vec3(0,1,0)})})),s.vsub(e,_e),_e.scale(.5,_e);const o=this.root||this;for(let t=0;8!==t;t++){const s=i[t];s.root=o;const n=s.aabb.lowerBound;n.x*=_e.x,n.y*=_e.y,n.z*=_e.z,n.vadd(e,n),n.vadd(_e,s.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const i=s.pop();i.aabb.overlaps(t)&&Array.prototype.push.apply(e,i.data),Array.prototype.push.apply(s,i.children)}return e}rayQuery(t,e,s){return t.getAABB(He),He.toLocalFrame(e,He),this.aabbQuery(He,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),this.children[t].children.length||this.children[t].data.length||this.children.splice(t,1)}}class Octree extends OctreeNode{constructor(t,e){void 0===e&&(e={}),super({root:null,aabb:t}),this.maxDepth=void 0!==e.maxDepth?e.maxDepth:8}}const _e=new Vec3,He=new AABB;class Trimesh extends Shape{constructor(t,e){super({type:Shape.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new AABB,this.edges=null,this.scale=new Vec3(1,1,1),this.tree=new Octree,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new AABB,i=new Vec3,o=new Vec3,n=new Vec3,r=[i,o,n];for(let e=0;e<this.indices.length/3;e++){const a=3*e;this._getUnscaledVertex(this.indices[a],i),this._getUnscaledVertex(this.indices[a+1],o),this._getUnscaledVertex(this.indices[a+2],n),s.setFromPoints(r),t.insert(s,e)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){Ue.copy(t);const s=this.scale,i=s.x,o=s.y,n=s.z,r=Ue.lowerBound,a=Ue.upperBound;return r.x/=i,r.y/=o,r.z/=n,a.x/=i,a.y/=o,a.z/=n,this.tree.aabbQuery(Ue,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=De,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const i=3*s,o=this.indices[i],n=this.indices[i+1],r=this.indices[i+2];this.getVertex(o,$e),this.getVertex(n,Ke),this.getVertex(r,Ze),Trimesh.computeNormal(Ke,$e,Ze,t),e[i]=t.x,e[i+1]=t.y,e[i+2]=t.z}}updateEdges(){const t={},add=(e,s)=>{t[e<s?`${e}_${s}`:`${s}_${e}`]=!0};for(let t=0;t<this.indices.length/3;t++){const e=3*t,s=this.indices[e],i=this.indices[e+1],o=this.indices[e+2];add(s,i),add(i,o),add(o,s)}const e=Object.keys(t);this.edges=new Int16Array(2*e.length);for(let t=0;t<e.length;t++){const s=e[t].split("_");this.edges[2*t]=parseInt(s[0],10),this.edges[2*t+1]=parseInt(s[1],10)}}getEdgeVertex(t,e,s){const i=this.edges[2*t+(e?1:0)];this.getVertex(i,s)}getEdgeVector(t,e){const s=Ge,i=Ye;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,i),i.vsub(s,e)}static computeNormal(t,e,s,i){e.vsub(t,Qe),s.vsub(e,Xe),Xe.cross(Qe,i),i.isZero()||i.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=3*t,i=this.vertices;return e.set(i[s],i[s+1],i[s+2])}getWorldVertex(t,e,s,i){return this.getVertex(t,i),Transform.pointToWorldFrame(e,s,i,i),i}getTriangleVertices(t,e,s,i){const o=3*t;this.getVertex(this.indices[o],e),this.getVertex(this.indices[o+1],s),this.getVertex(this.indices[o+2],i)}getNormal(t,e){const s=3*t;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(Je);const s=Je.upperBound.x-Je.lowerBound.x,i=Je.upperBound.y-Je.lowerBound.y,o=Je.upperBound.z-Je.lowerBound.z;return e.set(1/12*t*(2*i*2*i+2*o*2*o),1/12*t*(2*s*2*s+2*o*2*o),1/12*t*(2*i*2*i+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,i=this.vertices.length;this.vertices;const o=ts;this.getVertex(0,o),e.copy(o),s.copy(o);for(let t=0;t!==i;t++)this.getVertex(t,o),o.x<e.x?e.x=o.x:o.x>s.x&&(s.x=o.x),o.y<e.y?e.y=o.y:o.y>s.y&&(s.y=o.y),o.z<e.z?e.z=o.z:o.z>s.z&&(s.z=o.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new Vec3;for(let i=0,o=e.length/3;i!==o;i++){this.getVertex(i,s);const e=s.lengthSquared();e>t&&(t=e)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=es,n=ss;o.position=t,o.quaternion=e,this.aabb.toWorldFrame(o,n),s.copy(n.lowerBound),i.copy(n.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,i,o){void 0===t&&(t=1),void 0===e&&(e=.5),void 0===s&&(s=8),void 0===i&&(i=6),void 0===o&&(o=2*Math.PI);const n=[],r=[];for(let r=0;r<=s;r++)for(let a=0;a<=i;a++){const l=a/i*o,c=r/s*Math.PI*2,h=(t+e*Math.cos(c))*Math.cos(l),d=(t+e*Math.cos(c))*Math.sin(l),u=e*Math.sin(c);n.push(h,d,u)}for(let t=1;t<=s;t++)for(let e=1;e<=i;e++){const s=(i+1)*t+e-1,o=(i+1)*(t-1)+e-1,n=(i+1)*(t-1)+e,a=(i+1)*t+e;r.push(s,o,a),r.push(o,n,a)}return new Trimesh(n,r)}}const De=new Vec3,Ue=new AABB,Ge=new Vec3,Ye=new Vec3,Xe=new Vec3,Qe=new Vec3,$e=new Vec3,Ke=new Vec3,Ze=new Vec3,Je=new AABB,ts=new Vec3,es=new Transform,ss=new AABB;class Solver{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class GSSolver extends Solver{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,c=t;let h,d,u,p,y,v;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const m=os,g=ns,f=is;m.length=r,g.length=r,f.length=r;for(let t=0;t!==r;t++){const e=n[t];f[t]=0,g[t]=e.computeB(c),m[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],s=e.vlambda,i=e.wlambda;s.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=n[t];h=g[t],d=m[t],v=f[t],y=e.computeGWlambda(),u=d*(h-y-e.eps*v),v+u<e.minForce?u=e.minForce-v:v+u>e.maxForce&&(u=e.maxForce-v),f[t]+=u,p+=u>0?u:-u,e.addToWlambda(u)}if(p*p<o)break}for(let t=0;t!==l;t++){const e=a[t],s=e.velocity,i=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),s.vadd(e.vlambda,s),e.wlambda.vmul(e.angularFactor,e.wlambda),i.vadd(e.wlambda,i)}let t=n.length;const e=1/c;for(;t--;)n[t].multiplier=f[t]*e}return s}}const is=[],os=[],ns=[];const rs=[],as=[],ls={bodies:[]},cs=Body.STATIC;function getUnvisitedNode(t){const e=t.length;for(let s=0;s!==e;s++){const e=t[s];if(!(e.visited||e.body.type&cs))return e}return!1}const hs=[];function bfs(t,e,s,i){for(hs.push(t),t.visited=!0,e(t,s,i);hs.length;){const t=hs.pop();let o;for(;o=getUnvisitedNode(t.children);)o.visited=!0,e(o,s,i),hs.push(o)}}function visitFunc(t,e,s){e.push(t.body);const i=t.eqs.length;for(let e=0;e!==i;e++){const i=t.eqs[e];s.includes(i)||s.push(i)}}function sortById(t,e){return e.id-t.id}class Pool{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Vec3Pool extends Pool{constructor(){super(...arguments),this.type=Vec3}constructObject(){return new Vec3}}const ds={sphereSphere:Shape.types.SPHERE,spherePlane:Shape.types.SPHERE|Shape.types.PLANE,boxBox:Shape.types.BOX|Shape.types.BOX,sphereBox:Shape.types.SPHERE|Shape.types.BOX,planeBox:Shape.types.PLANE|Shape.types.BOX,convexConvex:Shape.types.CONVEXPOLYHEDRON,sphereConvex:Shape.types.SPHERE|Shape.types.CONVEXPOLYHEDRON,planeConvex:Shape.types.PLANE|Shape.types.CONVEXPOLYHEDRON,boxConvex:Shape.types.BOX|Shape.types.CONVEXPOLYHEDRON,sphereHeightfield:Shape.types.SPHERE|Shape.types.HEIGHTFIELD,boxHeightfield:Shape.types.BOX|Shape.types.HEIGHTFIELD,convexHeightfield:Shape.types.CONVEXPOLYHEDRON|Shape.types.HEIGHTFIELD,sphereParticle:Shape.types.PARTICLE|Shape.types.SPHERE,planeParticle:Shape.types.PLANE|Shape.types.PARTICLE,boxParticle:Shape.types.BOX|Shape.types.PARTICLE,convexParticle:Shape.types.PARTICLE|Shape.types.CONVEXPOLYHEDRON,cylinderCylinder:Shape.types.CYLINDER,sphereCylinder:Shape.types.SPHERE|Shape.types.CYLINDER,planeCylinder:Shape.types.PLANE|Shape.types.CYLINDER,boxCylinder:Shape.types.BOX|Shape.types.CYLINDER,convexCylinder:Shape.types.CONVEXPOLYHEDRON|Shape.types.CYLINDER,heightfieldCylinder:Shape.types.HEIGHTFIELD|Shape.types.CYLINDER,particleCylinder:Shape.types.PARTICLE|Shape.types.CYLINDER,sphereTrimesh:Shape.types.SPHERE|Shape.types.TRIMESH,planeTrimesh:Shape.types.PLANE|Shape.types.TRIMESH};class Narrowphase{get[ds.sphereSphere](){return this.sphereSphere}get[ds.spherePlane](){return this.spherePlane}get[ds.boxBox](){return this.boxBox}get[ds.sphereBox](){return this.sphereBox}get[ds.planeBox](){return this.planeBox}get[ds.convexConvex](){return this.convexConvex}get[ds.sphereConvex](){return this.sphereConvex}get[ds.planeConvex](){return this.planeConvex}get[ds.boxConvex](){return this.boxConvex}get[ds.sphereHeightfield](){return this.sphereHeightfield}get[ds.boxHeightfield](){return this.boxHeightfield}get[ds.convexHeightfield](){return this.convexHeightfield}get[ds.sphereParticle](){return this.sphereParticle}get[ds.planeParticle](){return this.planeParticle}get[ds.boxParticle](){return this.boxParticle}get[ds.convexParticle](){return this.convexParticle}get[ds.cylinderCylinder](){return this.convexConvex}get[ds.sphereCylinder](){return this.sphereConvex}get[ds.planeCylinder](){return this.planeConvex}get[ds.boxCylinder](){return this.boxConvex}get[ds.convexCylinder](){return this.convexConvex}get[ds.heightfieldCylinder](){return this.heightfieldCylinder}get[ds.particleCylinder](){return this.particleCylinder}get[ds.sphereTrimesh](){return this.sphereTrimesh}get[ds.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Vec3Pool,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new ContactEquation(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,c=i.material||e.material;return l&&c&&l.restitution>=0&&c.restitution>=0&&(r.restitution=l.restitution*c.restitution),r.si=o||s,r.sj=n||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const c=o.material||s.material,h=n.material||i.material;if(c&&h&&c.friction>=0&&h.friction>=0&&(l=c.friction*h.friction),l>0){const o=l*(r.frictionGravity||r.gravity).length();let n=s.invMass+i.invMass;n>0&&(n=1/n);const c=this.frictionEquationPool,h=c.length?c.pop():new FrictionEquation(s,i,o*n),d=c.length?c.pop():new FrictionEquation(s,i,o*n);return h.bi=d.bi=s,h.bj=d.bj=i,h.minForce=d.minForce=-o*n,h.maxForce=d.maxForce=o*n,h.ri.copy(t.ri),h.rj.copy(t.rj),d.ri.copy(t.ri),d.rj.copy(t.rj),t.ni.tangents(h.t,d.t),h.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),d.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),h.enabled=d.enabled=t.enabled,e.push(h,d),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];us.setZero(),ps.setZero(),ys.setZero();const o=e.bi;e.bj;for(let s=0;s!==t;s++)e=this.result[this.result.length-1-s],e.bi!==o?(us.vadd(e.ni,us),ps.vadd(e.ri,ps),ys.vadd(e.rj,ys)):(us.vsub(e.ni,us),ps.vadd(e.rj,ps),ys.vadd(e.ri,ys));const n=1/t;ps.scale(n,s.ri),ys.scale(n,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),us.normalize(),us.tangents(s.t,i.t)}getContacts(t,e,s,i,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=i,this.frictionResult=n;const a=gs,l=fs,c=vs,h=ms;for(let i=0,o=t.length;i!==o;i++){const o=t[i],n=e[i];let r=null;o.material&&n.material&&(r=s.getContactMaterial(o.material,n.material)||null);const d=o.type&Body.KINEMATIC&&n.type&Body.STATIC||o.type&Body.STATIC&&n.type&Body.KINEMATIC||o.type&Body.KINEMATIC&&n.type&Body.KINEMATIC;for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],a),o.quaternion.vmult(o.shapeOffsets[t],c),c.vadd(o.position,c);const e=o.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],h),h.vadd(n.position,h);const i=n.shapes[t];if(!(e.collisionFilterMask&i.collisionFilterGroup&&i.collisionFilterMask&e.collisionFilterGroup))continue;if(c.distanceTo(h)>e.boundingSphereRadius+i.boundingSphereRadius)continue;let u=null;e.material&&i.material&&(u=s.getContactMaterial(e.material,i.material)||null),this.currentContactMaterial=u||r||s.defaultContactMaterial;const p=this[e.type|i.type];if(p){let t=!1;t=e.type<i.type?p.call(this,e,i,c,h,a,l,o,n,e,i,d):p.call(this,i,e,h,c,l,a,n,o,e,i,d),t&&d&&(s.shapeOverlapKeeper.set(e.id,i.id),s.bodyOverlapKeeper.set(o.id,n.id))}}}}}sphereSphere(t,e,s,i,o,n,r,a,l,c,h){if(h)return s.distanceSquared(i)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,a,t,e,l,c);i.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(i,d.rj),d.rj.vsub(a.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,i,o,n,r,a,l,c,h){const d=this.createContactEquation(r,a,t,e,l,c);if(d.ni.set(0,0,1),n.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(i,Ls),d.ni.scale(d.ni.dot(Ls),Ws),Ls.vsub(Ws,d.rj),-Ls.dot(d.ni)<=t.radius){if(h)return!0;const t=d.ri,e=d.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,h)}sphereBox(t,e,s,i,o,n,r,a,l,c,h){const d=this.v3pool,u=Gs;s.vsub(i,_s),e.getSideNormals(u,n);const p=t.radius;let y=!1;const v=Xs,m=Qs,g=$s;let f=null,w=0,x=0,b=0,V=null;for(let t=0,e=u.length;t!==e&&!1===y;t++){const e=Hs;e.copy(u[t]);const s=e.length();e.normalize();const i=_s.dot(e);if(i<s+p&&i>0){const o=Ds,n=Us;o.copy(u[(t+1)%3]),n.copy(u[(t+2)%3]);const r=o.length(),a=n.length();o.normalize(),n.normalize();const l=_s.dot(o),c=_s.dot(n);if(l<r&&l>-r&&c<a&&c>-a){const t=Math.abs(i-s-p);if((null===V||t<V)&&(V=t,x=l,b=c,f=s,v.copy(e),m.copy(o),g.copy(n),w++,h))return!0}}}if(w){y=!0;const o=this.createContactEquation(r,a,t,e,l,c);v.scale(-p,o.ri),o.ni.copy(v),o.ni.negate(o.ni),v.scale(f,v),m.scale(x,m),v.vadd(m,v),g.scale(b,g),v.vadd(g,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}let B=d.get();const A=Ys;for(let o=0;2!==o&&!y;o++)for(let n=0;2!==n&&!y;n++)for(let d=0;2!==d&&!y;d++)if(B.set(0,0,0),o?B.vadd(u[0],B):B.vsub(u[0],B),n?B.vadd(u[1],B):B.vsub(u[1],B),d?B.vadd(u[2],B):B.vsub(u[2],B),i.vadd(B,A),A.vsub(s,A),A.lengthSquared()<p*p){if(h)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,c);o.ri.copy(A),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(p,o.ri),o.rj.copy(B),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}d.release(B),B=null;const S=d.get(),E=d.get(),C=d.get(),z=d.get(),T=d.get(),R=u.length;for(let o=0;o!==R&&!y;o++)for(let n=0;n!==R&&!y;n++)if(o%3!=n%3){u[n].cross(u[o],S),S.normalize(),u[o].vadd(u[n],E),C.copy(s),C.vsub(E,C),C.vsub(i,C);const d=C.dot(S);S.scale(d,z);let v=0;for(;v===o%3||v===n%3;)v++;T.copy(s),T.vsub(z,T),T.vsub(E,T),T.vsub(i,T);const m=Math.abs(d),g=T.length();if(m<u[v].length()&&g<p){if(h)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,c);E.vadd(z,o.rj),o.rj.copy(o.rj),T.negate(o.ni),o.ni.normalize(),o.ri.copy(o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(s,o.ri),o.ri.normalize(),o.ri.scale(p,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}d.release(S,E,C,z,T)}planeBox(t,e,s,i,o,n,r,a,l,c,h){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,h)}convexConvex(t,e,s,i,o,n,r,a,l,c,h,d,u){const p=di;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,o,i,n,p,d,u)){const d=[],u=ui;t.clipAgainstHull(s,o,e,i,n,p,-100,100,d);let y=0;for(let o=0;o!==d.length;o++){if(h)return!0;const n=this.createContactEquation(r,a,t,e,l,c),v=n.ri,m=n.rj;p.negate(n.ni),d[o].normal.negate(u),u.scale(d[o].depth,u),d[o].point.vadd(u,v),m.copy(d[o].point),v.vsub(s,v),m.vsub(i,m),v.vadd(s,v),v.vsub(r.position,v),m.vadd(i,m),m.vsub(a.position,m),this.result.push(n),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,o,n,r,a,l,c,h){const d=this.v3pool;s.vsub(i,Ks);const u=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let m=!1;for(let o=0;o!==y.length;o++){const d=y[o],u=ei;n.vmult(d,u),i.vadd(u,u);const p=ti;if(u.vsub(s,p),p.lengthSquared()<v*v){if(h)return!0;m=!0;const o=this.createContactEquation(r,a,t,e,l,c);return o.ri.copy(p),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(v,o.ri),u.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),void this.createFrictionEquationsFromContact(o,this.frictionResult)}}for(let o=0,g=p.length;o!==g&&!1===m;o++){const g=u[o],f=p[o],w=si;n.vmult(g,w);const x=ii;n.vmult(y[f[0]],x),x.vadd(i,x);const b=oi;w.scale(-v,b),s.vadd(b,b);const V=ni;b.vsub(x,V);const B=V.dot(w),A=ri;if(s.vsub(x,A),B<0&&A.dot(w)>0){const o=[];for(let t=0,e=f.length;t!==e;t++){const e=d.get();n.vmult(y[f[t]],e),i.vadd(e,e),o.push(e)}if(pointInPolygon(o,w,s)){if(h)return!0;m=!0;const n=this.createContactEquation(r,a,t,e,l,c);w.scale(-v,n.ri),w.negate(n.ni);const u=d.get();w.scale(-B,u);const p=d.get();w.scale(-v,p),s.vsub(i,n.rj),n.rj.vadd(p,n.rj),n.rj.vadd(u,n.rj),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),d.release(u),d.release(p),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)d.release(o[t]);return}for(let u=0;u!==f.length;u++){const p=d.get(),m=d.get();n.vmult(y[f[(u+1)%f.length]],p),n.vmult(y[f[(u+2)%f.length]],m),i.vadd(p,p),i.vadd(m,m);const g=Zs;m.vsub(p,g);const w=Js;g.unit(w);const x=d.get(),b=d.get();s.vsub(p,b);const V=b.dot(w);w.scale(V,x),x.vadd(p,x);const B=d.get();if(x.vsub(s,B),V>0&&V*V<g.lengthSquared()&&B.lengthSquared()<v*v){if(h)return!0;const n=this.createContactEquation(r,a,t,e,l,c);x.vsub(i,n.rj),x.vsub(s,n.ni),n.ni.normalize(),n.ni.scale(v,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)d.release(o[t]);return d.release(p),d.release(m),d.release(x),d.release(B),void d.release(b)}d.release(p),d.release(m),d.release(x),d.release(B),d.release(b)}for(let t=0,e=o.length;t!==e;t++)d.release(o[t])}}}planeConvex(t,e,s,i,o,n,r,a,l,c,h){const d=ai,u=li;u.set(0,0,1),o.vmult(u,u);let p=0;const y=ci;for(let o=0;o!==e.vertices.length;o++){d.copy(e.vertices[o]),n.vmult(d,d),i.vadd(d,d),d.vsub(s,y);if(u.dot(y)<=0){if(h)return!0;const o=this.createContactEquation(r,a,t,e,l,c),n=hi;u.scale(u.dot(y),n),d.vsub(n,n),n.vsub(s,o.ri),o.ni.copy(u),d.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,h)}sphereHeightfield(t,e,s,i,o,n,r,a,l,c,h){const d=e.data,u=t.radius,p=e.elementSize,y=Ei,v=Si;Transform.pointToLocalFrame(i,n,s,v);let m=Math.floor((v.x-u)/p)-1,g=Math.ceil((v.x+u)/p)+1,f=Math.floor((v.y-u)/p)-1,w=Math.ceil((v.y+u)/p)+1;if(g<0||w<0||m>d.length||f>d[0].length)return;m<0&&(m=0),g<0&&(g=0),f<0&&(f=0),w<0&&(w=0),m>=d.length&&(m=d.length-1),g>=d.length&&(g=d.length-1),w>=d[0].length&&(w=d[0].length-1),f>=d[0].length&&(f=d[0].length-1);const x=[];e.getRectMinMax(m,f,g,w,x);const b=x[0],V=x[1];if(v.z-u>V||v.z+u<b)return;const B=this.result;for(let l=m;l<g;l++)for(let c=f;c<w;c++){const d=B.length;let u=!1;if(e.getConvexTrianglePillar(l,c,!1),Transform.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,h)),h&&u)return!0;if(e.getConvexTrianglePillar(l,c,!0),Transform.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,h)),h&&u)return!0;if(B.length-d>2)return}}boxHeightfield(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,h)}convexHeightfield(t,e,s,i,o,n,r,a,l,c,h){const d=e.data,u=e.elementSize,p=t.boundingSphereRadius,y=Bi,v=Ai,m=Vi;Transform.pointToLocalFrame(i,n,s,m);let g=Math.floor((m.x-p)/u)-1,f=Math.ceil((m.x+p)/u)+1,w=Math.floor((m.y-p)/u)-1,x=Math.ceil((m.y+p)/u)+1;if(f<0||x<0||g>d.length||w>d[0].length)return;g<0&&(g=0),f<0&&(f=0),w<0&&(w=0),x<0&&(x=0),g>=d.length&&(g=d.length-1),f>=d.length&&(f=d.length-1),x>=d[0].length&&(x=d[0].length-1),w>=d[0].length&&(w=d[0].length-1);const b=[];e.getRectMinMax(g,w,f,x,b);const V=b[0],B=b[1];if(!(m.z-p>B||m.z+p<V))for(let l=g;l<f;l++)for(let c=w;c<x;c++){let d=!1;if(e.getConvexTrianglePillar(l,c,!1),Transform.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,h,v,null)),h&&d)return!0;if(e.getConvexTrianglePillar(l,c,!0),Transform.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,h,v,null)),h&&d)return!0}}sphereParticle(t,e,s,i,o,n,r,a,l,c,h){const d=mi;d.set(0,0,1),i.vsub(s,d);if(d.lengthSquared()<=t.radius*t.radius){if(h)return!0;const s=this.createContactEquation(a,r,e,t,l,c);d.normalize(),s.rj.copy(d),s.rj.scale(t.radius,s.rj),s.ni.copy(d),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,o,n,r,a,l,c,h){const d=pi;d.set(0,0,1),r.quaternion.vmult(d,d);const u=yi;i.vsub(r.position,u);if(d.dot(u)<=0){if(h)return!0;const s=this.createContactEquation(a,r,e,t,l,c);s.ni.copy(d),s.ni.negate(s.ni),s.ri.set(0,0,0);const o=vi;d.scale(d.dot(i),o),i.vsub(o,o),s.rj.copy(o),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,h)}convexParticle(t,e,s,i,o,n,r,a,l,c,h){let d=-1;const u=wi,p=bi;let y=null;const v=fi;if(v.copy(i),v.vsub(s,v),o.conjugate(gi),gi.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],o=t.worldFaceNormals[e];i.vsub(s[0],xi);const n=-o.dot(xi);if(null===y||Math.abs(n)<Math.abs(y)){if(h)return!0;y=n,d=e,u.copy(o)}}if(-1!==d){const o=this.createContactEquation(a,r,e,t,l,c);u.scale(y,p),p.vadd(i,p),p.vsub(s,p),o.rj.copy(p),u.negate(o.ni),o.ri.set(0,0,0);const n=o.ri,h=o.rj;n.vadd(i,n),n.vsub(a.position,n),h.vadd(s,h),h.vsub(r.position,h),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,o,n,r,a,l,c,h){return this.convexHeightfield(e,t,i,s,n,o,a,r,l,c,h)}particleCylinder(t,e,s,i,o,n,r,a,l,c,h){return this.convexParticle(e,t,i,s,n,o,a,r,l,c,h)}sphereTrimesh(t,e,s,i,o,n,r,a,l,c,h){const d=Es,u=Cs,p=zs,y=Ts,v=Rs,m=Ms,g=Is,f=Ss,w=Bs,x=Ns;Transform.pointToLocalFrame(i,n,s,v);const b=t.radius;g.lowerBound.set(v.x-b,v.y-b,v.z-b),g.upperBound.set(v.x+b,v.y+b,v.z+b),e.getTrianglesInAABB(g,x);const V=As,B=t.radius*t.radius;for(let o=0;o<x.length;o++)for(let d=0;d<3;d++)if(e.getVertex(e.indices[3*x[o]+d],V),V.vsub(v,w),w.lengthSquared()<=B){if(f.copy(V),Transform.pointToWorldFrame(i,n,f,V),V.vsub(s,w),h)return!0;let o=this.createContactEquation(r,a,t,e,l,c);o.ni.copy(w),o.ni.normalize(),o.ri.copy(o.ni),o.ri.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.copy(V),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}for(let o=0;o<x.length;o++)for(let g=0;g<3;g++){e.getVertex(e.indices[3*x[o]+g],d),e.getVertex(e.indices[3*x[o]+(g+1)%3],u),u.vsub(d,p),v.vsub(u,m);const f=m.dot(p);v.vsub(d,m);let w=m.dot(p);if(w>0&&f<0){v.vsub(d,m),y.copy(p),y.normalize(),w=m.dot(y),y.scale(w,m),m.vadd(d,m);if(m.distanceTo(v)<t.radius){if(h)return!0;const o=this.createContactEquation(r,a,t,e,l,c);m.vsub(v,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),Transform.pointToWorldFrame(i,n,m,m),m.vsub(a.position,o.rj),Transform.vectorToWorldFrame(n,o.ni,o.ni),Transform.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}}const A=Ps,S=Fs,E=qs,C=Vs;for(let o=0,d=x.length;o!==d;o++){e.getTriangleVertices(x[o],A,S,E),e.getNormal(x[o],C),v.vsub(A,m);let d=m.dot(C);if(C.scale(d,m),v.vsub(m,m),d=m.distanceTo(v),Ray.pointInTriangle(m,A,S,E)&&d<t.radius){if(h)return!0;let o=this.createContactEquation(r,a,t,e,l,c);m.vsub(v,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),Transform.pointToWorldFrame(i,n,m,m),m.vsub(a.position,o.rj),Transform.vectorToWorldFrame(n,o.ni,o.ni),Transform.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}x.length=0}planeTrimesh(t,e,s,i,o,n,r,a,l,c,h){const d=new Vec3,u=ws;u.set(0,0,1),o.vmult(u,u);for(let o=0;o<e.vertices.length/3;o++){e.getVertex(o,d);const p=new Vec3;p.copy(d),Transform.pointToWorldFrame(i,n,p,d);const y=xs;d.vsub(s,y);if(u.dot(y)<=0){if(h)return!0;const s=this.createContactEquation(r,a,t,e,l,c);s.ni.copy(u);const i=bs;u.scale(y.dot(u),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(r.position,s.ri),s.rj.copy(d),s.rj.vsub(a.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const us=new Vec3,ps=new Vec3,ys=new Vec3,vs=new Vec3,ms=new Vec3,gs=new Quaternion,fs=new Quaternion,ws=new Vec3,xs=new Vec3,bs=new Vec3,Vs=new Vec3,Bs=new Vec3;new Vec3;const As=new Vec3,Ss=new Vec3,Es=new Vec3,Cs=new Vec3,zs=new Vec3,Ts=new Vec3,Rs=new Vec3,Ms=new Vec3,Ps=new Vec3,Fs=new Vec3,qs=new Vec3,Is=new AABB,Ns=[],Ls=new Vec3,Ws=new Vec3,js=new Vec3,Os=new Vec3,ks=new Vec3;function pointInPolygon(t,e,s){let i=null;const o=t.length;for(let n=0;n!==o;n++){const r=t[n],a=js;t[(n+1)%o].vsub(r,a);const l=Os;a.cross(e,l);const c=ks;s.vsub(r,c);const h=l.dot(c);if(!(null===i||h>0&&!0===i||h<=0&&!1===i))return!1;null===i&&(i=h>0)}return!0}const _s=new Vec3,Hs=new Vec3,Ds=new Vec3,Us=new Vec3,Gs=[new Vec3,new Vec3,new Vec3,new Vec3,new Vec3,new Vec3],Ys=new Vec3,Xs=new Vec3,Qs=new Vec3,$s=new Vec3,Ks=new Vec3,Zs=new Vec3,Js=new Vec3,ti=new Vec3,ei=new Vec3,si=new Vec3,ii=new Vec3,oi=new Vec3,ni=new Vec3,ri=new Vec3;new Vec3,new Vec3;const ai=new Vec3,li=new Vec3,ci=new Vec3,hi=new Vec3,di=new Vec3,ui=new Vec3,pi=new Vec3,yi=new Vec3,vi=new Vec3,mi=new Vec3,gi=new Quaternion,fi=new Vec3;new Vec3;const wi=new Vec3,xi=new Vec3,bi=new Vec3,Vi=new Vec3,Bi=new Vec3,Ai=[0],Si=new Vec3,Ei=new Vec3;class OverlapKeeper{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let o=0;for(;s>i[o];)o++;if(s!==i[o]){for(let t=i.length-1;t>=o;t--)i[t+1]=i[t];i[o]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,o=s.length,n=i.length;let r=0;for(let e=0;e<o;e++){let o=!1;const n=s[e];for(;n>i[r];)r++;o=n===i[r],o||unpackAndPush(t,n)}r=0;for(let t=0;t<n;t++){let o=!1;const n=i[t];for(;n>s[r];)r++;o=s[r]===n,o||unpackAndPush(e,n)}}}function unpackAndPush(t,e){t.push((4294901760&e)>>16,65535&e)}const getKey=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class TupleDictionary{constructor(){this.data={keys:[]}}get(t,e){const s=getKey(t,e);return this.data[s]}set(t,e,s){const i=getKey(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=getKey(t,e),i=this.data.keys.indexOf(s);-1!==i&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}new AABB;const Ci=new Ray,zi=e&&e.performance||{};if(!zi.now){let t=Date.now();zi.timing&&zi.timing.navigationStart&&(t=zi.timing.navigationStart),zi.now=()=>Date.now()-t}new Vec3;const Ti={type:"postStep"},Ri={type:"preStep"},Mi={type:Body.COLLIDE_EVENT_NAME,body:null,contact:null},Pi=[],Fi=[],qi=[],Ii=[],Ni=[],Li=[],Wi={type:"beginContact",bodyA:null,bodyB:null},ji={type:"endContact",bodyA:null,bodyB:null},Oi={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ki={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};var _i=s.AABB=AABB,Hi=s.ArrayCollisionMatrix=ArrayCollisionMatrix,Di=s.BODY_SLEEP_STATES=x,Ui=s.BODY_TYPES=w,Gi=s.Body=Body,Yi=s.Box=Box,Xi=s.Broadphase=Broadphase,Qi=s.COLLISION_TYPES=ds,$i=s.ConeTwistConstraint=class ConeTwistConstraint extends PointToPointConstraint{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new Vec3,e,s.pivotB?s.pivotB.clone():new Vec3,i),this.axisA=s.axisA?s.axisA.clone():new Vec3,this.axisB=s.axisB?s.axisB.clone():new Vec3,this.collideConnected=!!s.collideConnected,this.angle=void 0!==s.angle?s.angle:0;const o=this.coneEquation=new ConeEquation(t,e,s),n=this.twistEquation=new RotationalEquation(t,e,s);this.twistAngle=void 0!==s.twistAngle?s.twistAngle:0,o.maxForce=0,o.minForce=-i,n.maxForce=0,n.minForce=-i,this.equations.push(o,n)}update(){const t=this.bodyA,e=this.bodyB,s=this.coneEquation,i=this.twistEquation;super.update(),t.vectorToWorldFrame(this.axisA,s.axisA),e.vectorToWorldFrame(this.axisB,s.axisB),this.axisA.tangents(i.axisA,i.axisA),t.vectorToWorldFrame(i.axisA,i.axisA),this.axisB.tangents(i.axisB,i.axisB),e.vectorToWorldFrame(i.axisB,i.axisB),s.angle=this.angle,i.maxAngle=this.twistAngle}},Ki=s.Constraint=Constraint,Zi=s.ContactEquation=ContactEquation,Ji=s.ContactMaterial=ContactMaterial,to=s.ConvexPolyhedron=ConvexPolyhedron,eo=s.Cylinder=class Cylinder extends ConvexPolyhedron{constructor(t,e,s,i){if(void 0===t&&(t=1),void 0===e&&(e=1),void 0===s&&(s=1),void 0===i&&(i=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const o=i,n=[],r=[],a=[],l=[],c=[],h=Math.cos,d=Math.sin;n.push(new Vec3(-e*d(0),.5*-s,e*h(0))),l.push(0),n.push(new Vec3(-t*d(0),.5*s,t*h(0))),c.push(1);for(let i=0;i<o;i++){const u=2*Math.PI/o*(i+1),p=2*Math.PI/o*(i+.5);i<o-1?(n.push(new Vec3(-e*d(u),.5*-s,e*h(u))),l.push(2*i+2),n.push(new Vec3(-t*d(u),.5*s,t*h(u))),c.push(2*i+3),a.push([2*i,2*i+1,2*i+3,2*i+2])):a.push([2*i,2*i+1,1,0]),(o%2==1||i<o/2)&&r.push(new Vec3(-d(p),0,h(p)))}a.push(l),r.push(new Vec3(0,1,0));const u=[];for(let t=0;t<c.length;t++)u.push(c[c.length-t-1]);a.push(u),super({vertices:n,faces:a,axes:r}),this.type=Shape.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=i}},so=s.DistanceConstraint=class DistanceConstraint extends Constraint{constructor(t,e,s,i){void 0===i&&(i=1e6),super(t,e),void 0===s&&(s=t.position.distanceTo(e.position)),this.distance=s;const o=this.distanceEquation=new ContactEquation(t,e);this.equations.push(o),o.minForce=-i,o.maxForce=i}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,i=.5*this.distance,o=s.ni;e.position.vsub(t.position,o),o.normalize(),o.scale(i,s.ri),o.scale(-i,s.rj)}},io=s.Equation=Equation,oo=s.EventTarget=EventTarget,no=s.FrictionEquation=FrictionEquation,ro=s.GSSolver=GSSolver,ao=s.GridBroadphase=class GridBroadphase extends Broadphase{constructor(t,e,s,i,o){void 0===t&&(t=new Vec3(100,100,100)),void 0===e&&(e=new Vec3(-100,-100,-100)),void 0===s&&(s=10),void 0===i&&(i=10),void 0===o&&(o=10),super(),this.nx=s,this.ny=i,this.nz=o,this.aabbMin=t,this.aabbMax=e;const n=this.nx*this.ny*this.nz;if(n<=0)throw"GridBroadphase: Each dimension's n must be >0";this.bins=[],this.binLengths=[],this.bins.length=n,this.binLengths.length=n;for(let t=0;t<n;t++)this.bins[t]=[],this.binLengths[t]=0}collisionPairs(t,e,s){const i=t.bodies.length,o=t.bodies,n=this.aabbMax,r=this.aabbMin,a=this.nx,l=this.ny,c=this.nz,h=l*c,d=c,u=1,p=n.x,y=n.y,v=n.z,m=r.x,g=r.y,f=r.z,w=a/(p-m),x=l/(y-g),b=c/(v-f),V=(p-m)/a,B=(y-g)/l,A=(v-f)/c,S=.5*Math.sqrt(V*V+B*B+A*A),E=Shape.types,C=E.SPHERE,z=E.PLANE;E.BOX,E.COMPOUND,E.CONVEXPOLYHEDRON;const T=this.bins,R=this.binLengths,M=this.bins.length;for(let t=0;t!==M;t++)R[t]=0;const P=Math.ceil;function addBoxToBins(t,e,s,i,o,n,r){let p=(t-m)*w|0,y=(e-g)*x|0,v=(s-f)*b|0,V=P((i-m)*w),B=P((o-g)*x),A=P((n-f)*b);p<0?p=0:p>=a&&(p=a-1),y<0?y=0:y>=l&&(y=l-1),v<0?v=0:v>=c&&(v=c-1),V<0?V=0:V>=a&&(V=a-1),B<0?B=0:B>=l&&(B=l-1),A<0?A=0:A>=c&&(A=c-1),p*=h,y*=d,v*=u,V*=h,B*=d,A*=u;for(let t=p;t<=V;t+=h)for(let e=y;e<=B;e+=d)for(let s=v;s<=A;s+=u){const i=t+e+s;T[i][R[i]++]=r}}for(let t=0;t!==i;t++){const e=o[t],s=e.shapes[0];switch(s.type){case C:{const t=s,i=e.position.x,o=e.position.y,n=e.position.z,r=t.radius;addBoxToBins(i-r,o-r,n-r,i+r,o+r,n+r,e);break}case z:{const t=s;t.worldNormalNeedsUpdate&&t.computeWorldNormal(e.quaternion);const i=t.worldNormal,o=m+.5*V-e.position.x,n=g+.5*B-e.position.y,r=f+.5*A-e.position.z,p=W;p.set(o,n,r);for(let t=0,s=0;t!==a;t++,s+=h,p.y=n,p.x+=V)for(let t=0,o=0;t!==l;t++,o+=d,p.z=r,p.y+=B)for(let t=0,n=0;t!==c;t++,n+=u,p.z+=A)if(p.dot(i)<S){const t=s+o+n;T[t][R[t]++]=e}break}default:e.aabbNeedsUpdate&&e.updateAABB(),addBoxToBins(e.aabb.lowerBound.x,e.aabb.lowerBound.y,e.aabb.lowerBound.z,e.aabb.upperBound.x,e.aabb.upperBound.y,e.aabb.upperBound.z,e)}}for(let t=0;t!==M;t++){const i=R[t];if(i>1){const o=T[t];for(let t=0;t!==i;t++){const i=o[t];for(let n=0;n!==t;n++){const t=o[n];this.needBroadphaseCollision(i,t)&&this.intersectionTest(i,t,e,s)}}}}this.makePairsUnique(e,s)}},lo=s.Heightfield=class Heightfield extends Shape{constructor(t,e){void 0===e&&(e={}),e=Utils.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:Shape.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,null===e.minValue&&this.updateMinValue(),null===e.maxValue&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new ConvexPolyhedron,this.pillarOffset=new Vec3,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o<e&&(e=o)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o>e&&(e=o)}this.maxValue=e}setHeightValueAtIndex(t,e,s){this.data[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,i,o){void 0===o&&(o=[]);const n=this.data;let r=this.minValue;for(let o=t;o<=s;o++)for(let t=e;t<=i;t++){const e=n[o][t];e>r&&(r=e)}o[0]=this.minValue,o[1]=r}getIndexOfPosition(t,e,s,i){const o=this.elementSize,n=this.data;let r=Math.floor(t/o),a=Math.floor(e/o);return s[0]=r,s[1]=a,i&&(r<0&&(r=0),a<0&&(a=0),r>=n.length-1&&(r=n.length-1),a>=n[0].length-1&&(a=n[0].length-1)),!(r<0||a<0||r>=n.length-1||a>=n[0].length-1)}getTriangleAt(t,e,s,i,o,n){const r=Pe;this.getIndexOfPosition(t,e,r,s);let a=r[0],l=r[1];const c=this.data;s&&(a=Math.min(c.length-2,Math.max(0,a)),l=Math.min(c[0].length-2,Math.max(0,l)));const h=this.elementSize,d=(t/h-a)**2+(e/h-l)**2>(t/h-(a+1))**2+(e/h-(l+1))**2;return this.getTriangle(a,l,d,i,o,n),d}getNormalAt(t,e,s,i){const o=Le,n=We,r=je,a=Oe,l=ke;this.getTriangleAt(t,e,s,o,n,r),n.vsub(o,a),r.vsub(o,l),a.cross(l,i),i.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:i,upperBound:o}=s;const n=this.data,r=this.elementSize;i.set(t*r,e*r,n[t][e]),o.set((t+1)*r,(e+1)*r,n[t+1][e+1])}getHeightAt(t,e,s){const i=this.data,o=qe,n=Ie,r=Ne,a=Pe;this.getIndexOfPosition(t,e,a,s);let l=a[0],c=a[1];s&&(l=Math.min(i.length-2,Math.max(0,l)),c=Math.min(i[0].length-2,Math.max(0,c)));const h=this.getTriangleAt(t,e,s,o,n,r);!function barycentricWeights(t,e,s,i,o,n,r,a,l){l.x=((n-a)*(t-r)+(r-o)*(e-a))/((n-a)*(s-r)+(r-o)*(i-a)),l.y=((a-i)*(t-r)+(s-r)*(e-a))/((n-a)*(s-r)+(r-o)*(i-a)),l.z=1-l.x-l.y}(t,e,o.x,o.y,n.x,n.y,r.x,r.y,Fe);const d=Fe;return h?i[l+1][c+1]*d.x+i[l][c+1]*d.y+i[l+1][c]*d.z:i[l][c]*d.x+i[l+1][c]*d.y+i[l][c+1]*d.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,i,o){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:i,offset:o}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,i,o,n){const r=this.data,a=this.elementSize;s?(i.set((t+1)*a,(e+1)*a,r[t+1][e+1]),o.set(t*a,(e+1)*a,r[t][e+1]),n.set((t+1)*a,e*a,r[t+1][e])):(i.set(t*a,e*a,r[t][e]),o.set((t+1)*a,e*a,r[t+1][e]),n.set(t*a,(e+1)*a,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let i=this.pillarConvex,o=this.pillarOffset;if(this.cacheEnabled){const n=this.getCachedConvexTrianglePillar(t,e,s);if(n)return this.pillarConvex=n.convex,void(this.pillarOffset=n.offset);i=new ConvexPolyhedron,o=new Vec3,this.pillarConvex=i,this.pillarOffset=o}const n=this.data,r=this.elementSize,a=i.faces;i.vertices.length=6;for(let t=0;t<6;t++)i.vertices[t]||(i.vertices[t]=new Vec3);a.length=5;for(let t=0;t<5;t++)a[t]||(a[t]=[]);const l=i.vertices,c=(Math.min(n[t][e],n[t+1][e],n[t][e+1],n[t+1][e+1])-this.minValue)/2+this.minValue;s?(o.set((t+.75)*r,(e+.75)*r,c),l[0].set(.25*r,.25*r,n[t+1][e+1]-c),l[1].set(-.75*r,.25*r,n[t][e+1]-c),l[2].set(.25*r,-.75*r,n[t+1][e]-c),l[3].set(.25*r,.25*r,-Math.abs(c)-1),l[4].set(-.75*r,.25*r,-Math.abs(c)-1),l[5].set(.25*r,-.75*r,-Math.abs(c)-1),a[0][0]=0,a[0][1]=1,a[0][2]=2,a[1][0]=5,a[1][1]=4,a[1][2]=3,a[2][0]=2,a[2][1]=5,a[2][2]=3,a[2][3]=0,a[3][0]=3,a[3][1]=4,a[3][2]=1,a[3][3]=0,a[4][0]=1,a[4][1]=4,a[4][2]=5,a[4][3]=2):(o.set((t+.25)*r,(e+.25)*r,c),l[0].set(-.25*r,-.25*r,n[t][e]-c),l[1].set(.75*r,-.25*r,n[t+1][e]-c),l[2].set(-.25*r,.75*r,n[t][e+1]-c),l[3].set(-.25*r,-.25*r,-Math.abs(c)-1),l[4].set(.75*r,-.25*r,-Math.abs(c)-1),l[5].set(-.25*r,.75*r,-Math.abs(c)-1),a[0][0]=0,a[0][1]=1,a[0][2]=2,a[1][0]=5,a[1][1]=4,a[1][2]=3,a[2][0]=0,a[2][1]=2,a[2][2]=5,a[2][3]=3,a[3][0]=1,a[3][1]=0,a[3][2]=3,a[3][3]=4,a[4][0]=4,a[4][1]=5,a[4][2]=2,a[4][3]=1),i.computeNormals(),i.computeEdges(),i.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,i,o)}calculateLocalInertia(t,e){return void 0===e&&(e=new Vec3),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),i.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new Vec3(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:i,y:o}=e,n=document.createElement("canvas");n.width=t.width,n.height=t.height;const r=n.getContext("2d");r.drawImage(t,0,0);const a=r.getImageData(0,0,t.width,t.height),l=this.data;l.length=0,this.elementSize=Math.abs(s)/a.width;for(let t=0;t<a.height;t++){const e=[];for(let o=0;o<a.width;o++){const n=(a.data[4*(t*a.height+o)]+a.data[4*(t*a.height+o)+1]+a.data[4*(t*a.height+o)+2])/4/255*i;s<0?e.push(n):e.unshift(n)}o<0?l.unshift(e):l.push(e)}this.updateMaxValue(),this.updateMinValue(),this.update()}},co=s.HingeConstraint=HingeConstraint,ho=s.JacobianElement=JacobianElement,uo=s.LockConstraint=class LockConstraint extends PointToPointConstraint{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6,o=new Vec3,n=new Vec3,r=new Vec3;t.position.vadd(e.position,r),r.scale(.5,r),e.pointToLocalFrame(r,n),t.pointToLocalFrame(r,o),super(t,o,e,n,i),this.xA=t.vectorToLocalFrame(Vec3.UNIT_X),this.xB=e.vectorToLocalFrame(Vec3.UNIT_X),this.yA=t.vectorToLocalFrame(Vec3.UNIT_Y),this.yB=e.vectorToLocalFrame(Vec3.UNIT_Y),this.zA=t.vectorToLocalFrame(Vec3.UNIT_Z),this.zB=e.vectorToLocalFrame(Vec3.UNIT_Z);const a=this.rotationalEquation1=new RotationalEquation(t,e,s),l=this.rotationalEquation2=new RotationalEquation(t,e,s),c=this.rotationalEquation3=new RotationalEquation(t,e,s);this.equations.push(a,l,c)}update(){const t=this.bodyA,e=this.bodyB;this.motorEquation;const s=this.rotationalEquation1,i=this.rotationalEquation2,o=this.rotationalEquation3;super.update(),t.vectorToWorldFrame(this.xA,s.axisA),e.vectorToWorldFrame(this.yB,s.axisB),t.vectorToWorldFrame(this.yA,i.axisA),e.vectorToWorldFrame(this.zB,i.axisB),t.vectorToWorldFrame(this.zA,o.axisA),e.vectorToWorldFrame(this.xB,o.axisB)}},po=s.Mat3=Mat3,yo=s.Material=Material,vo=s.NaiveBroadphase=NaiveBroadphase,mo=s.Narrowphase=Narrowphase,go=s.ObjectCollisionMatrix=class ObjectCollisionMatrix{constructor(){this.matrix={}}get(t,e){let{id:s}=t,{id:i}=e;if(i>s){const t=i;i=s,s=t}return`${s}-${i}`in this.matrix}set(t,e,s){let{id:i}=t,{id:o}=e;if(o>i){const t=o;o=i,i=t}s?this.matrix[`${i}-${o}`]=!0:delete this.matrix[`${i}-${o}`]}reset(){this.matrix={}}setNumObjects(t){}},fo=s.Particle=class Particle extends Shape{constructor(){super({type:Shape.types.PARTICLE})}calculateLocalInertia(t,e){return void 0===e&&(e=new Vec3),e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,i){s.copy(t),i.copy(t)}},wo=s.Plane=class Plane extends Shape{constructor(){super({type:Shape.types.PLANE}),this.worldNormal=new Vec3,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return void 0===e&&(e=new Vec3),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){Me.set(0,0,1),e.vmult(Me,Me);const o=Number.MAX_VALUE;s.set(-o,-o,-o),i.set(o,o,o),1===Me.x?i.x=t.x:-1===Me.x&&(s.x=t.x),1===Me.y?i.y=t.y:-1===Me.y&&(s.y=t.y),1===Me.z?i.z=t.z:-1===Me.z&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}},xo=s.PointToPointConstraint=PointToPointConstraint,bo=s.Pool=Pool,Vo=s.Quaternion=Quaternion,Bo=s.RAY_MODES=G,Ao=s.Ray=Ray,So=s.RaycastResult=RaycastResult,Eo=s.RaycastVehicle=class RaycastVehicle{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=void 0!==t.indexRightAxis?t.indexRightAxis:2,this.indexForwardAxis=void 0!==t.indexForwardAxis?t.indexForwardAxis:0,this.indexUpAxis=void 0!==t.indexUpAxis?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){void 0===t&&(t={});const e=new WheelInfo(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){this.wheelInfos[e].steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(0===t?1:0,1===t?1:0,2===t?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,i=this.chassisBody;for(let t=0;t<s;t++)this.updateWheelTransform(t);this.currentVehicleSpeedKmHour=3.6*i.velocity.length();const o=new Vec3;this.getVehicleAxisWorld(this.indexForwardAxis,o),o.dot(i.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let t=0;t<s;t++)this.castRay(e[t]);this.updateSuspension(t);const n=new Vec3,r=new Vec3;for(let o=0;o<s;o++){const s=e[o];let a=s.suspensionForce;a>s.maxSuspensionForce&&(a=s.maxSuspensionForce),s.raycastResult.hitNormalWorld.scale(a*t,n),s.raycastResult.hitPointWorld.vsub(i.position,r),i.applyImpulse(n,r)}this.updateFriction(t);const a=new Vec3,l=new Vec3,c=new Vec3;for(let o=0;o<s;o++){const s=e[o];i.getVelocityAtWorldPoint(s.chassisConnectionPointWorld,c);let n=1;if(1===this.indexUpAxis)n=-1;if(s.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,l);const e=l.dot(s.raycastResult.hitNormalWorld);s.raycastResult.hitNormalWorld.scale(e,a),l.vsub(a,l);const i=l.dot(c);s.deltaRotation=n*i*t/s.radius}!s.sliding&&s.isInContact||0===s.engineForce||!s.useCustomSlidingRotationalSpeed||(s.deltaRotation=(s.engineForce>0?1:-1)*s.customSlidingRotationalSpeed*t),Math.abs(s.brake)>Math.abs(s.engineForce)&&(s.deltaRotation=0),s.rotation+=s.deltaRotation,s.deltaRotation*=.99}}updateSuspension(t){const e=this.chassisBody.mass,s=this.wheelInfos,i=s.length;for(let t=0;t<i;t++){const i=s[t];if(i.isInContact){let t;const s=i.suspensionRestLength-i.suspensionLength;t=i.suspensionStiffness*s*i.clippedInvContactDotSuspension;const o=i.suspensionRelativeVelocity;let n;n=o<0?i.dampingCompression:i.dampingRelaxation,t-=n*o,i.suspensionForce=t*e,i.suspensionForce<0&&(i.suspensionForce=0)}else i.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=ne,s=re;this.updateWheelTransformWorld(t);const i=this.chassisBody;let o=-1;const n=t.suspensionRestLength+t.radius;t.directionWorld.scale(n,e);const r=t.chassisConnectionPointWorld;r.vadd(e,s);const a=t.raycastResult;a.reset();const l=i.collisionResponse;i.collisionResponse=!1,this.world.rayTest(r,s,a),i.collisionResponse=l;const c=a.body;if(t.raycastResult.groundObject=0,c){o=a.distance,t.raycastResult.hitNormalWorld=a.hitNormalWorld,t.isInContact=!0;const e=a.distance;t.suspensionLength=e-t.radius;const s=t.suspensionRestLength-t.maxSuspensionTravel,n=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<s&&(t.suspensionLength=s),t.suspensionLength>n&&(t.suspensionLength=n,t.raycastResult.reset());const r=t.raycastResult.hitNormalWorld.dot(t.directionWorld),l=new Vec3;i.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,l);const c=t.raycastResult.hitNormalWorld.dot(l);if(r>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=10;else{const e=-1/r;t.suspensionRelativeVelocity=c*e,t.clippedInvContactDotSuspension=e}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return o}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=se,s=ie,i=oe,o=this.wheelInfos[t];this.updateWheelTransformWorld(o),o.directionLocal.scale(-1,e),s.copy(o.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const n=o.steering,r=new Quaternion;r.setFromAxisAngle(e,n);const a=new Quaternion;a.setFromAxisAngle(s,o.rotation);const l=o.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,l),l.mult(a,l),l.normalize();const c=o.worldTransform.position;c.copy(o.directionWorld),c.scale(o.suspensionLength,c),c.vadd(o.chassisConnectionPointWorld,c)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=le,s=this.wheelInfos,i=s.length,o=this.chassisBody,n=he,r=ce;this.numWheelsOnGround=0;for(let t=0;t<i;t++){const e=s[t];e.raycastResult.body&&this.numWheelsOnGround++,e.sideImpulse=0,e.forwardImpulse=0,n[t]||(n[t]=new Vec3),r[t]||(r[t]=new Vec3)}for(let t=0;t<i;t++){const i=s[t],a=i.raycastResult.body;if(a){const s=r[t];this.getWheelTransformWorld(t).vectorToWorldFrame(ae[this.indexRightAxis],s);const l=i.raycastResult.hitNormalWorld,c=s.dot(l);l.scale(c,e),s.vsub(e,s),s.normalize(),l.cross(s,n[t]),n[t].normalize(),i.sideImpulse=resolveSingleBilateral(o,i.raycastResult.hitPointWorld,a,i.raycastResult.hitPointWorld,s),i.sideImpulse*=de}}this.sliding=!1;for(let e=0;e<i;e++){const i=s[e],r=i.raycastResult.body;let a=0;if(i.slipInfo=1,r){const s=0,l=i.brake?i.brake:s;a=calcRollingFriction(o,r,i.raycastResult.hitPointWorld,n[e],l),a+=i.engineForce*t;const c=l/a;i.slipInfo*=c}if(i.forwardImpulse=0,i.skidInfo=1,r){i.skidInfo=1;const e=i.suspensionForce*t*i.frictionSlip,s=e*e;i.forwardImpulse=a;const o=.5*i.forwardImpulse/i.forwardAcceleration,n=1*i.sideImpulse/i.sideAcceleration,r=o*o+n*n;if(i.sliding=!1,r>s){this.sliding=!0,i.sliding=!0;const t=e/Math.sqrt(r);i.skidInfo*=t}}}if(this.sliding)for(let t=0;t<i;t++){const e=s[t];0!==e.sideImpulse&&e.skidInfo<1&&(e.forwardImpulse*=e.skidInfo,e.sideImpulse*=e.skidInfo)}for(let t=0;t<i;t++){const e=s[t],i=new Vec3;if(e.raycastResult.hitPointWorld.vsub(o.position,i),0!==e.forwardImpulse){const s=new Vec3;n[t].scale(e.forwardImpulse,s),o.applyImpulse(s,i)}if(0!==e.sideImpulse){const s=e.raycastResult.body,n=new Vec3;e.raycastResult.hitPointWorld.vsub(s.position,n);const a=new Vec3;r[t].scale(e.sideImpulse,a),o.vectorToLocalFrame(i,i),i["xyz"[this.indexUpAxis]]*=e.rollInfluence,o.vectorToWorldFrame(i,i),o.applyImpulse(a,i),a.scale(-1,a),s.applyImpulse(a,n)}}}},Co=s.RigidVehicle=class RigidVehicle{constructor(t){void 0===t&&(t={}),this.wheelBodies=[],this.coordinateSystem=void 0!==t.coordinateSystem?t.coordinateSystem.clone():new Vec3(1,2,3),t.chassisBody?this.chassisBody=t.chassisBody:this.chassisBody=new Body({mass:1,shape:new Box(new Vec3(5,.5,2))}),this.constraints=[],this.wheelAxes=[],this.wheelForces=[]}addWheel(t){let e;void 0===t&&(t={}),e=t.body?t.body:new Body({mass:1,shape:new Sphere(1.2)}),this.wheelBodies.push(e),this.wheelForces.push(0);const s=void 0!==t.position?t.position.clone():new Vec3,i=new Vec3;this.chassisBody.pointToWorldFrame(s,i),e.position.set(i.x,i.y,i.z);const o=void 0!==t.axis?t.axis.clone():new Vec3(0,0,1);this.wheelAxes.push(o);const n=new HingeConstraint(this.chassisBody,e,{pivotA:s,axisA:o,pivotB:Vec3.ZERO,axisB:o,collideConnected:!1});return this.constraints.push(n),this.wheelBodies.length-1}setSteeringValue(t,e){const s=this.wheelAxes[e],i=Math.cos(t),o=Math.sin(t),n=s.x,r=s.z;this.constraints[e].axisA.set(-i*n+o*r,0,o*n+i*r)}setMotorSpeed(t,e){const s=this.constraints[e];s.enableMotor(),s.motorTargetVelocity=t}disableMotor(t){this.constraints[t].disableMotor()}setWheelForce(t,e){this.wheelForces[e]=t}applyWheelForce(t,e){const s=this.wheelAxes[e],i=this.wheelBodies[e],o=i.torque;s.scale(t,Ve),i.vectorToWorldFrame(Ve,Ve),o.vadd(Ve,o)}addToWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let e=0;e<s.length;e++)t.addBody(s[e]);for(let s=0;s<e.length;s++)t.addConstraint(e[s]);t.addEventListener("preStep",this._update.bind(this))}_update(){const t=this.wheelForces;for(let e=0;e<t.length;e++)this.applyWheelForce(t[e],e)}removeFromWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let e=0;e<s.length;e++)t.removeBody(s[e]);for(let s=0;s<e.length;s++)t.removeConstraint(e[s])}getWheelSpeed(t){const e=this.wheelAxes[t],s=this.wheelBodies[t].angularVelocity;return this.chassisBody.vectorToWorldFrame(e,Be),s.dot(Be)}},zo=s.RotationalEquation=RotationalEquation,To=s.RotationalMotorEquation=RotationalMotorEquation,Ro=s.SAPBroadphase=SAPBroadphase,Mo=s.SHAPE_TYPES=d,Po=s.SPHSystem=class SPHSystem{constructor(){this.particles=[],this.density=1,this.smoothingRadius=1,this.speedOfSound=1,this.viscosity=.01,this.eps=1e-6,this.pressures=[],this.densities=[],this.neighbors=[]}add(t){this.particles.push(t),this.neighbors.length<this.particles.length&&this.neighbors.push([])}remove(t){const e=this.particles.indexOf(t);-1!==e&&(this.particles.splice(e,1),this.neighbors.length>this.particles.length&&this.neighbors.pop())}getNeighbors(t,e){const s=this.particles.length,i=t.id,o=this.smoothingRadius*this.smoothingRadius,n=Ae;for(let r=0;r!==s;r++){const s=this.particles[r];s.position.vsub(t.position,n),i!==s.id&&n.lengthSquared()<o&&e.push(s)}}update(){const t=this.particles.length,e=Se,s=this.speedOfSound,i=this.eps;for(let i=0;i!==t;i++){const t=this.particles[i],o=this.neighbors[i];o.length=0,this.getNeighbors(t,o),o.push(this.particles[i]);const n=o.length;let r=0;for(let s=0;s!==n;s++){t.position.vsub(o[s].position,e);const i=e.length(),n=this.w(i);r+=o[s].mass*n}this.densities[i]=r,this.pressures[i]=s*s*(this.densities[i]-this.density)}const o=Ee,n=Ce,r=ze,a=Te,l=Re;for(let e=0;e!==t;e++){const t=this.particles[e];let s,c;o.set(0,0,0),n.set(0,0,0);const h=this.neighbors[e],d=h.length;for(let u=0;u!==d;u++){const d=h[u];t.position.vsub(d.position,a);const p=a.length();s=-d.mass*(this.pressures[e]/(this.densities[e]*this.densities[e]+i)+this.pressures[u]/(this.densities[u]*this.densities[u]+i)),this.gradw(a,r),r.scale(s,r),o.vadd(r,o),d.velocity.vsub(t.velocity,l),l.scale(1/(1e-4+this.densities[e]*this.densities[u])*this.viscosity*d.mass,l),c=this.nablaw(p),l.scale(c,l),n.vadd(l,n)}n.scale(t.mass,n),o.scale(t.mass,o),t.force.vadd(n,t.force),t.force.vadd(o,t.force)}}w(t){const e=this.smoothingRadius;return 315/(64*Math.PI*e**9)*(e*e-t*t)**3}gradw(t,e){const s=t.length(),i=this.smoothingRadius;t.scale(945/(32*Math.PI*i**9)*(i*i-s*s)**2,e)}nablaw(t){const e=this.smoothingRadius;return 945/(32*Math.PI*e**9)*(e*e-t*t)*(7*t*t-3*e*e)}},Fo=s.Shape=Shape,qo=s.Solver=Solver,Io=s.Sphere=Sphere,No=s.SplitSolver=class SplitSolver extends Solver{constructor(t){for(super(),this.iterations=10,this.tolerance=1e-7,this.subsolver=t,this.nodes=[],this.nodePool=[];this.nodePool.length<128;)this.nodePool.push(this.createNode())}createNode(){return{body:null,children:[],eqs:[],visited:!1}}solve(t,e){const s=rs,i=this.nodePool,o=e.bodies,n=this.equations,r=n.length,a=o.length,l=this.subsolver;for(;i.length<a;)i.push(this.createNode());s.length=a;for(let t=0;t<a;t++)s[t]=i[t];for(let t=0;t!==a;t++){const e=s[t];e.body=o[t],e.children.length=0,e.eqs.length=0,e.visited=!1}for(let t=0;t!==r;t++){const e=n[t],i=o.indexOf(e.bi),r=o.indexOf(e.bj),a=s[i],l=s[r];a.children.push(l),a.eqs.push(e),l.children.push(a),l.eqs.push(e)}let c,h=0,d=as;l.tolerance=this.tolerance,l.iterations=this.iterations;const u=ls;for(;c=getUnvisitedNode(s);){d.length=0,u.bodies.length=0,bfs(c,visitFunc,u.bodies,d);const e=d.length;d=d.sort(sortById);for(let t=0;t!==e;t++)l.addEquation(d[t]);l.solve(t,u),l.removeAllEquations(),h++}return h}},Lo=s.Spring=class Spring{constructor(t,e,s){void 0===s&&(s={}),this.restLength="number"==typeof s.restLength?s.restLength:1,this.stiffness=s.stiffness||100,this.damping=s.damping||1,this.bodyA=t,this.bodyB=e,this.localAnchorA=new Vec3,this.localAnchorB=new Vec3,s.localAnchorA&&this.localAnchorA.copy(s.localAnchorA),s.localAnchorB&&this.localAnchorB.copy(s.localAnchorB),s.worldAnchorA&&this.setWorldAnchorA(s.worldAnchorA),s.worldAnchorB&&this.setWorldAnchorB(s.worldAnchorB)}setWorldAnchorA(t){this.bodyA.pointToLocalFrame(t,this.localAnchorA)}setWorldAnchorB(t){this.bodyB.pointToLocalFrame(t,this.localAnchorB)}getWorldAnchorA(t){this.bodyA.pointToWorldFrame(this.localAnchorA,t)}getWorldAnchorB(t){this.bodyB.pointToWorldFrame(this.localAnchorB,t)}applyForce(){const t=this.stiffness,e=this.damping,s=this.restLength,i=this.bodyA,o=this.bodyB,n=Ht,r=Dt,a=Ut,l=Gt,c=Jt,h=Yt,d=Xt,u=Qt,p=$t,y=Kt,v=Zt;this.getWorldAnchorA(h),this.getWorldAnchorB(d),h.vsub(i.position,u),d.vsub(o.position,p),d.vsub(h,n);const m=n.length();r.copy(n),r.normalize(),o.velocity.vsub(i.velocity,a),o.angularVelocity.cross(p,c),a.vadd(c,a),i.angularVelocity.cross(u,c),a.vsub(c,a),r.scale(-t*(m-s)-e*a.dot(r),l),i.force.vsub(l,i.force),o.force.vadd(l,o.force),u.cross(l,y),p.cross(l,v),i.torque.vsub(y,i.torque),o.torque.vadd(v,o.torque)}},Wo=s.Transform=Transform,jo=s.Trimesh=Trimesh,Oo=s.Vec3=Vec3,ko=s.Vec3Pool=Vec3Pool,_o=s.WheelInfo=WheelInfo,Ho=s.World=class World extends EventTarget{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new Vec3,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new Vec3,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new NaiveBroadphase,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new GSSolver,this.constraints=[],this.narrowphase=new Narrowphase(this),this.collisionMatrix=new ArrayCollisionMatrix,this.collisionMatrixPrevious=new ArrayCollisionMatrix,this.bodyOverlapKeeper=new OverlapKeeper,this.shapeOverlapKeeper=new OverlapKeeper,this.contactmaterials=[],this.contactMaterialTable=new TupleDictionary,this.defaultMaterial=new Material("default"),this.defaultContactMaterial=new ContactMaterial(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof RaycastResult?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return void 0===s&&(s={}),s.mode=Ray.ALL,s.from=t,s.to=e,s.callback=i,Ci.intersectWorld(this,s)}raycastAny(t,e,s,i){return void 0===s&&(s={}),s.mode=Ray.ANY,s.from=t,s.to=e,s.result=i,Ci.intersectWorld(this,s)}raycastClosest(t,e,s,i){return void 0===s&&(s={}),s.mode=Ray.CLOSEST,s.from=t,s.to=e,s.result=i,Ci.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof Body&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let e=0;e<i.length;e++){const s=i[e];if(s.id===t)return s}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const s=zi.now()/1e3;if(this.lastCallTime){const i=s-this.lastCallTime;this.step(t,i,e)}else this.step(t,void 0,e);this.lastCallTime=s}step(t,e,s){if(void 0===s&&(s=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=zi.now();let o=0;for(;this.accumulator>=t&&o<s&&(this.internalStep(t),this.accumulator-=t,o++,!(zi.now()-i>1e3*t)););this.accumulator=this.accumulator%t;const n=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,n,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,n,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=qi,i=Ii,o=this.bodies.length,n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,c=this.profile,h=Body.DYNAMIC;let d=-1/0;const u=this.constraints,p=Fi;a.length();const y=a.x,v=a.y,m=a.z;let g=0;for(l&&(d=zi.now()),g=0;g!==o;g++){const t=n[g];if(t.type===h){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*v,e.z+=s*m}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(d=zi.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(c.broadphase=zi.now()-d);let f=u.length;for(g=0;g!==f;g++){const t=u[g];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(d=zi.now());const w=Pi,x=e.length;for(g=0;g!==x;g++)w.push(e[g]);e.length=0;const b=this.frictionEquations.length;for(g=0;g!==b;g++)p.push(this.frictionEquations[g]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,w,this.frictionEquations,p),l&&(c.narrowphase=zi.now()-d),l&&(d=zi.now()),g=0;g<this.frictionEquations.length;g++)r.addEquation(this.frictionEquations[g]);const V=e.length;for(let t=0;t!==V;t++){const s=e[t],i=s.bi,o=s.bj,n=s.si,a=s.sj;let l;if(l=i.material&&o.material&&this.getContactMaterial(i.material,o.material)||this.defaultContactMaterial,l.friction,i.material&&o.material&&(i.material.friction>=0&&o.material.friction>=0&&(i.material.friction,o.material.friction),i.material.restitution>=0&&o.material.restitution>=0&&(s.restitution=i.material.restitution*o.material.restitution)),r.addEquation(s),i.allowSleep&&i.type===Body.DYNAMIC&&i.sleepState===Body.SLEEPING&&o.sleepState===Body.AWAKE&&o.type!==Body.STATIC){o.velocity.lengthSquared()+o.angularVelocity.lengthSquared()>=2*o.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(o.allowSleep&&o.type===Body.DYNAMIC&&o.sleepState===Body.SLEEPING&&i.sleepState===Body.AWAKE&&i.type!==Body.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(o.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,o,!0),this.collisionMatrixPrevious.get(i,o)||(Mi.body=o,Mi.contact=s,i.dispatchEvent(Mi),Mi.body=i,o.dispatchEvent(Mi)),this.bodyOverlapKeeper.set(i.id,o.id),this.shapeOverlapKeeper.set(n.id,a.id)}for(this.emitContactEvents(),l&&(c.makeContactConstraints=zi.now()-d,d=zi.now()),g=0;g!==o;g++){const t=n[g];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=u.length,g=0;g!==f;g++){const t=u[g];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(c.solve=zi.now()-d),r.removeAllEquations();const B=Math.pow;for(g=0;g!==o;g++){const e=n[g];if(e.type&h){const s=B(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const o=e.angularVelocity;if(o){const s=B(1-e.angularDamping,t);o.scale(s,o)}}}this.dispatchEvent(Ri),l&&(d=zi.now());const A=this.stepnumber%(this.quatNormalizeSkip+1)==0,S=this.quatNormalizeFast;for(g=0;g!==o;g++)n[g].integrate(t,A,S);this.clearForces(),this.broadphase.dirty=!0,l&&(c.integrate=zi.now()-d),this.stepnumber+=1,this.dispatchEvent(Ti);let E=!0;if(this.allowSleep)for(E=!1,g=0;g!==o;g++){const t=n[g];t.sleepTick(this.time),t.sleepState!==Body.SLEEPING&&(E=!0)}this.hasActiveBodies=E}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(Ni,Li),t){for(let t=0,e=Ni.length;t<e;t+=2)Wi.bodyA=this.getBodyById(Ni[t]),Wi.bodyB=this.getBodyById(Ni[t+1]),this.dispatchEvent(Wi);Wi.bodyA=Wi.bodyB=null}if(e){for(let t=0,e=Li.length;t<e;t+=2)ji.bodyA=this.getBodyById(Li[t]),ji.bodyB=this.getBodyById(Li[t+1]),this.dispatchEvent(ji);ji.bodyA=ji.bodyB=null}Ni.length=Li.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(Ni,Li),s){for(let t=0,e=Ni.length;t<e;t+=2){const e=this.getShapeById(Ni[t]),s=this.getShapeById(Ni[t+1]);Oi.shapeA=e,Oi.shapeB=s,e&&(Oi.bodyA=e.body),s&&(Oi.bodyB=s.body),this.dispatchEvent(Oi)}Oi.bodyA=Oi.bodyB=Oi.shapeA=Oi.shapeB=null}if(i){for(let t=0,e=Li.length;t<e;t+=2){const e=this.getShapeById(Li[t]),s=this.getShapeById(Li[t+1]);ki.shapeA=e,ki.shapeB=s,e&&(ki.bodyA=e.body),s&&(ki.bodyB=s.body),this.dispatchEvent(ki)}ki.bodyA=ki.bodyB=ki.shapeA=ki.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}};t.AABB=_i,t.ArrayCollisionMatrix=Hi,t.BODY_SLEEP_STATES=Di,t.BODY_TYPES=Ui,t.Body=Gi,t.Box=Yi,t.Broadphase=Xi,t.COLLISION_TYPES=Qi,t.ConeTwistConstraint=$i,t.Constraint=Ki,t.ContactEquation=Zi,t.ContactMaterial=Ji,t.ConvexPolyhedron=to,t.Cylinder=eo,t.DistanceConstraint=so,t.Equation=io,t.EventTarget=oo,t.FrictionEquation=no,t.GSSolver=ro,t.GridBroadphase=ao,t.Heightfield=lo,t.HingeConstraint=co,t.JacobianElement=ho,t.LockConstraint=uo,t.Mat3=po,t.Material=yo,t.NaiveBroadphase=vo,t.Narrowphase=mo,t.ObjectCollisionMatrix=go,t.Particle=fo,t.Plane=wo,t.PointToPointConstraint=xo,t.Pool=bo,t.Quaternion=Vo,t.RAY_MODES=Bo,t.Ray=Ao,t.RaycastResult=So,t.RaycastVehicle=Eo,t.RigidVehicle=Co,t.RotationalEquation=zo,t.RotationalMotorEquation=To,t.SAPBroadphase=Ro,t.SHAPE_TYPES=Mo,t.SPHSystem=Po,t.Shape=Fo,t.Solver=qo,t.Sphere=Io,t.SplitSolver=No,t.Spring=Lo,t.Transform=Wo,t.Trimesh=jo,t.Vec3=Oo,t.Vec3Pool=ko,t.WheelInfo=_o,t.World=Ho,t.default=s,Object.defineProperty(t,"__esModule",{value:!0})}));