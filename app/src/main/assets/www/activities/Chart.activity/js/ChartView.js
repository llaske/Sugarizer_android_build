const ChartView={template:'\n    \t<div class="canvas-container">\n\t\t    <canvas ref="canvas"></canvas>\n    \t</div>\n    ',props:["tabularData","activityTitle","pref"],data:()=>({indexAxis:"x"}),mounted(){const t=this.$refs.canvas.getContext("2d");this.chart=new Chart(t,{type:this.pref.chartType,data:{datasets:[{label:"",fill:"origin",data:this.values.signValues,borderWidth:3,pointHoverBorderWidth:4,pointRadius:4,pointHoverRadius:6,hoverOffset:8}],labels:this.labels},options:this.chartOpVertical}),Chart.defaults.scale.grid.lineWidth=2},methods:{updateTitle(t){this.chart.options.plugins.title.text=t,this.chart.update()},updateLabel(t){this.chart.options.scales[t].title.text=this.pref.labels[t],this.chart.update()},setPieBgColor(){this.chart.data.datasets[0].backgroundColor=this.createGradient(this.pref.chartColor.fill,this.labels.length)},setChartBgColor(){this.chart.data.datasets[0].backgroundColor=this.pref.chartColor.fill},updateChartColor(){"pie"===this.pref.chartType?this.setPieBgColor():this.setChartBgColor(),this.chart.data.datasets[0].borderColor=this.pref.chartColor.stroke,this.chart.update()},updateFontValues(t,s){let a,i,e="font";switch(s){case"fontsize":a="size",i="fontSize";break;case"fontfamily":a="family",i="fontFamily";break;case"color":e="color",i="fontColor"}const r=this.pref.font[t][s];switch(t){case"title":let t=this.chart.options.plugins.title;a?t[e][a]=r:t[e]=r;break;case"labels":["x","y"].forEach((t=>{let s=this.chart.options.scales[t].title;a?s[e][a]=r:s[e]=r}));break;case"tick":this.chart.options.plugins.labels[i]=r,["x","y"].forEach((t=>{let s=this.chart.options.scales[t].ticks;a?s[e][a]=r:s[e]=r}))}this.chart.update()},updateChartType(){switch(this.chart.data.datasets[0].data=this.values.signValues,this.setChartBgColor(),this.pref.chartType){case"horizontalBar":this.indexAxis="y",this.chart.config.type="bar",this.chart.config.options=this.chartOpHorizontal;break;case"bar":this.indexAxis="x",this.chart.config.type=this.pref.chartType,this.chart.config.options=this.chartOpVertical,this.chart.config.options.scales.x.offset=!0;break;case"line":this.indexAxis="x",this.chart.config.type=this.pref.chartType,this.chart.config.options=this.chartOpVertical,this.chart.config.options.scales.x.offset=!1;break;case"pie":this.chart.config.type=this.pref.chartType,this.chart.config.options=this.chartOpPie,this.chart.data.datasets[0].data=this.values.absValues,this.setPieBgColor()}this.chart.update()},getImgData(){const t=this.$refs.canvas,s=document.getElementById("app");s.classList.add("fullscreen"),this.chart.resize();const a="image/png",i=t.toDataURL(a,1);s.classList.remove("fullscreen"),this.chart.resize();return{imgData:i,metadata:{mimetype:a,title:this.activityTitle,activity:"org.olpcfrance.MediaViewerActivity",timestamp:(new Date).getTime(),creation_time:(new Date).getTime(),file_size:0}}},createGradient(t,s){let a=t;t.startsWith("#")&&(a=Chart.helpers.color(t).rgbString());let i=a.substring(4,a.length-1).replace(/ /g,"").split(",");i=i.map((t=>parseInt(t)));const e=[];for(let t=0;t<s;t++){const a=t/(s-1),r=Math.round(i[0]+(190-i[0])*a*.6),o=Math.round(i[1]+(255-i[1])*a*.6),h=Math.round(i[2]+(230-i[2])*a*.6);e.push(`rgb(${r},${o},${h})`)}return e}},computed:{chartOptions(){return{responsive:!0,maintainAspectRatio:!1,layout:{padding:{top:15,left:18,right:18,bottom:40}},indexAxis:this.indexAxis,plugins:{tooltip:{titleFont:{size:18},bodyFont:{size:18}},title:{display:!0,text:this.activityTitle,padding:{bottom:35},font:{size:this.pref.font.title.fontsize,family:this.pref.font.title.fontfamily},color:this.pref.font.title.color},legend:{display:!1}},scales:{y:{beginAtZero:!0,ticks:{color:this.pref.font.tick.color,font:{size:this.pref.font.tick.fontsize}},title:{display:!0,text:this.pref.labels.y,color:this.pref.font.labels.color,font:{size:this.pref.font.labels.fontsize}}},x:{ticks:{color:this.pref.font.tick.color,font:{size:this.pref.font.tick.fontsize}},title:{display:!0,text:this.pref.labels.x,color:this.pref.font.labels.color,font:{size:this.pref.font.labels.fontsize}}}}}},chartOpHorizontal(){return{...this.chartOptions,plugins:{...this.chartOptions.plugins,labels:{...this.chartOptions.plugins.labels,render:()=>{}}},scales:{x:{...this.chartOptions.scales.x,beginAtZero:!0,grid:{color:t=>t.tick&&0===t.tick.value?"rgb(50,50,50)":"rgb(240,240,240)"}},y:{...this.chartOptions.scales.y,offset:!0}}}},chartOpVertical(){return{...this.chartOptions,plugins:{...this.chartOptions.plugins,labels:{...this.chartOptions.plugins.labels,render:()=>{}}},scales:{x:{...this.chartOptions.scales.x,offset:!0},y:{...this.chartOptions.scales.y,beginAtZero:!0,grid:{color:t=>t.tick&&0===t.tick.value?"rgb(50,50,50)":"rgb(240,240,240)"}}}}},chartOpPie(){return{...this.chartOptions,plugins:{...this.chartOptions.plugins,labels:{render:t=>`${t.label} (${t.percentage}%)`,precision:2,position:"outside",textMargin:15,fontColor:this.pref.font.tick.color,fontSize:this.pref.font.tick.fontsize,fontFamily:this.pref.font.tick.fontfamily}},scales:{x:{...this.chartOptions.scales.x,display:!1},y:{...this.chartOptions.scales.y,display:!1}}}},labels(){return this.tabularData.map((t=>t.x||""))},values(){const t={signValues:[],absValues:[]};return this.tabularData.forEach((s=>{const a=s.y?parseFloat(s.y):0;t.signValues.push(a),t.absValues.push(Math.abs(a))})),t}},watch:{labels(){this.chart.data.labels=this.labels,this.chart.update()},values(){"pie"===this.pref.chartType?(this.chart.data.datasets[0].backgroundColor=this.createGradient(this.pref.chartColor.fill,this.labels.length),this.chart.data.datasets[0].data=this.values.absValues):this.chart.data.datasets[0].data=this.values.signValues,this.chart.update()}}};